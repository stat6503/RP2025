str_view(c("summarize", "summary", "rowsum", "asumb"), "\bsum\b")
str_view(c("summarize", "summary", "rowsum", "asumb", "sum"), "\bsum\b")
str_view(c("summarize", "summary", "rowsum", "asumb", "sum"), "\\bsum\\b")
str_view(c("summarize", "summary", "rowsum", "asumb"), "\\bsum")
str_view(c("abc","c","ab"), "^...$")
str_view_all(c("abc","c","ab"), "^...$")
str_view(c("abc", ""), "^$")                # 빈 문자열과 매칭
str_view(c("abc", ""), "$^$")                # 빈 문자열과 매칭
str_view(c("abc", ""), "$^$.")                # 빈 문자열과 매칭
str_view(c("abc a", ""), "$^$.")                # 빈 문자열과 매칭
str_view(c("abc a", ""), "$^$")                # 빈 문자열과 매칭
str_view_all(x, "CC*")                      # 'CC'가 0번
x <- "1888 is the longest year in Roman numerals: MDCCCLXXXVIII"
str_view_all(x, "CC*")                      # 'CC'가 0번
str_view_all(x, "CC*")                      # 'CC'가 0번
str_view_all(x, "CC?")                      # 'CC'가 0번
x <- "I have a dog, a cat, and a bunny, and I also have dogs and cats."
# '?'는 a가 0번 또는 1번 반복되는 경우
str_view_all(x, "a?")
# '+'는 a가 1번 이상 반복되는 경우
str_view_all(x, "a+")
# '*'는 a가 0번 이상 반복되는 경우
str_view_all(x, "a*")
x <- "1888 is the longest year in Roman numerals: MDCCCLXXXVIII"
str_view_all(x, "CC?")                      # 'CC'가 0번 또는 1번 반복
str_view_all(x, "CC+")                      # 'CC'가 1번 이상 반복
str_view_all(x, "CC*")                      # 'CC'가 0번 이상 반복
str_view(x, "CC?")                      # 'CC'가 0번 또는 1번 반복
x <- c("banana", "apple")
# 첫 번째 매칭만 표시
str_view(x, "a")
# 모든 매칭 표시
str_view_all(x, "a")
x <- "1888 is the longest year in Roman numerals: MDCCCLXXXVIII"
str_view(x, "CC?")                      # 'CC'가 0번 또는 1번 반복
str_view(x, "CC+")                      # 'CC'가 1번 이상 반복
str_view(x, "CC*")                      # 'CC'가 0번 이상 반복
str_view(x, "C{2}")                     # 'C'가 정확히 2번 매칭
str_view(x, "C{2,}")                    # 'C'가 2번 이상 매칭
str_view(x, "C{2,3}")                   # 'C'가 2번 이상 3번 이하 매칭
str_view(x, "C{0,3}")                   # 'C'가 최대 3번 반복 → C, CC, CCC
str_view(x, "C{,3}")                   # 'C'가 최대 3번 반복 → C, CC, CCC
str_view(x, "C{2,3}")                   # 'C'가 2번 이상 3번 이하 반복 → CC, CCC
str_view(c("color", "colour"), "colou?r")
names <- c("Hadley", "Mine", "Garrett")
str_view_all(names, "[aeiou]")          # 모음과 매칭
str_view_all(names, "[^aeiou]")         # 자음과 매칭
str_view_all(names, "[^aeiou]+")        # 같은 문자가 매칭되었지만 매칭 개수가 다름
x <- c("gray", "grey")
str_view(x, "gr(a|e)y")
str_view(c("summarize", "summarise"), "summari(z|s)e")
str_view("'dkdk'", "\'")
str_view("'dkdk'", "\"")
str_view("\"dkdk\", "\"")
str_view("\"dkdk\"", "\"")
str_view("\'dkdk\'", "\'")
str_view("\ddd'", "\'")
str_view("\\ddd'", "\'")
str_view("\\ddd", "\'")
"\\ddd"
str_view("\\ddd", "\")
str_view("\\ddd", "\\")
str_view("\\ddd", "\\\\")
str_view("\"dkdk\"", "\"")
str_view("\"dkdk\"", "\\"")
str_view("\"dkdk\"", "\\\"")
str_view('"dkdk"', "\\\"")
text <- "The total cost is 29 dollars\nand 99 cents."
str_view_all(text, "\\d")               # 숫자(0~9)와 매칭
str_view_all(text, "\\s")               # 여백 문자와 매칭
text
writeLines(text)
words
library(babynames)
babynames %>% filter(str_detect(name, "x$"))
babynames %>%
group_by(year) %>%
summarise(prop_x = mean(str_detect(name, "x$")))
seq_along(words)
babynames %>%
count(name) %>%
mutate(vowels = str_count(name, "[aeiou]"),                     # 모음 개수 확인
consonants = str_count(name, "[^aeiou]"))                # 자음 개수 확인
babynames %>%
count(name) %>%
mutate(vowels = str_count(name, "[aeiou]"),         # 모음 개수
consonants = str_count(name, "[^aeiou]"))    # 자음 개수
count(length = str_length(name), wt = n)            # 이름 길이의 분포
head(sentences)
color <- c("red", "orange", "yellow", "green", "blue", "purple")
color_match <- str_c(color, collapse = "|")           # 색상 이름 벡터를 하나의 정규 표현식으로 변환
has_color <- str_subset(sentences, color_match)
has_color
str_subset(words, "^t")
head(sentences)
color <- c("red", "orange", "yellow", "green", "blue", "purple")
color_match <- str_c(color, collapse = "|")           # 색상 이름 벡터를 하나의 정규 표현식으로 변환
has_color <- str_subset(sentences, color_match)       # 색상을 포함하는 문장
matches <- str_extract(has_color, color_match)        # 첫 번째로 매칭된 색상
more <- sentences[str_count(sentences, color_match) > 1]
str_view(more, color_match)
more <- sentences[str_count(sentences, color_match) > 1]
str_view(more, color_match)
str_extract(more, color_match)
x <- "This is a sentence. This is another sentence."
str_view(x, boundary("word"))
str_view(x, boundary("sentence"))
str_view(x, boundary("line_break"))
str_view(x, boundary("character"))
x <- "Hello world! R is fun.\nNew lines are useful.\nLet's learn stringr."
str_view(x, boundary("word"))
str_view(x, boundary("sentence"))
str_view(x, boundary("line_break"))
str_view(x, boundary("character"))
bookdown::render_book("index.Rmd", output_dir = "docs")
bookdown::render_book("index.Rmd", output_dir = "docs")
library(tidyverse)
fct1 <- factor(c("b", "b", "a", "c", "c", "c"))
fct_inorder(fct1)                                     # Levels: b a c
fct_infreq(fct1)                                      # Levels: c b a
## inseq() 예제
fct2 <- factor(1:3, levels = c("2", "3", "1"))
fct_inseq(fct2)                                       # Levels : 1 2 3
## inrev() 예제
fct_rev(fct1)                                       # Levels : 1 2 3
fct_rev(fct2)                                       # Levels : 1 2 3
library(lubridate)
dday <- today() - ymd(19990113)
as.duration(dday)
dday
dseconds(15)
dminutes(10)
dhours(c(12, 24))
ddays(0:5)
dweeks(3)
dmonths(1:6)
dyears(1)
## 산술 연산
2 * dyears(1)
dyears(1) + dweeks(12) + dhours(15)
tomorrow <- today() + ddays(1)
last_year <- today() - dyears(1)
# daylight saving time
one_pm <- ymd_hms("2016-03-12 13:00:00", tz = "America/New_York")
one_pm                                        # "2016-03-12 13:00:00 EST"
one_pm + ddays(1)                             # "2016-03-13 14:00:00 EDT"
## 산술 연산
2 * dyears(1)
dyears(1) + dweeks(12) + dhours(15)
tomorrow <- today() + ddays(1)
last_year <- today() - dyears(1)
tomorrow
last_year
# daylight saving time
one_pm <- ymd_hms("2016-03-12 13:00:00", tz = "America/New_York")
one_pm                                        # "2016-03-12 13:00:00 EST"
one_pm + ddays(1)                             # "2016-03-13 14:00:00 EDT"
# 덧셈, 뺄셈, 곱셈 연산
10 * (months(6) + days(1))
days(50) + hours(25) + minutes(2)
# 윤년
ymd("2016-01-01") + dyears(1)
ymd("2016-01-01") + years(1)
ymd("2024-01-01") + dyears(1)
ymd("2024-01-01") + years(1)
one_pm <- ymd_hms("2025-03-09 13:00:00", tz = "America/New_York")
one_pm                                  # "2016-03-12 13:00:00 EST"
one_pm + ddays(1)                       # "2016-03-13 14:00:00 EDT"
one_pm <- ymd_hms("2025-03-02 13:00:00", tz = "America/New_York")
one_pm                                  # "2016-03-12 13:00:00 EST"
one_pm + ddays(1)                       # "2016-03-13 14:00:00 EDT"
one_pm <- ymd_hms("2025-03-015 13:00:00", tz = "America/New_York")
one_pm <- ymd_hms("2025-03-15 13:00:00", tz = "America/New_York")
one_pm                                  # "2016-03-12 13:00:00 EST"
one_pm + ddays(1)                       # "2016-03-13 14:00:00 EDT"
one_pm <- ymd_hms("2025-03-08 13:00:00", tz = "America/New_York")
one_pm                                  # "2016-03-12 13:00:00 EST"
one_pm + ddays(1)                       # "2016-03-13 14:00:00 EDT"
one_pm <- ymd_hms("2025-03-08 13:00:00", tz = "America/New_York")
one_pm                                  # "2016-03-12 13:00:00 EST"
one_pm + days(1)                        # "2016-03-13 13:00:00 EDT"
library(nycflights13)
next_year <- today() + years(1)
interval(start = today(), end = next_year)    # today() %--% next_year
next_year
is(next_year)
is(interval(start = today(), end = next_year))
# interval object 기간 확인
(today() %--% next_year) / ddays(1)
interval(start = today(), end = next_year)    # today() %--% next_year
## Example 1
# interval 생성
next_year <- today() + years(1)
next_year
interval(start = today(), end = next_year)    # today() %--% next_year
today() %--% next_year
## Example 2
# interval 기간 확인
years(1)
## Example 2
# interval 기간 확인
years(1) / days(1)
days(1)
(today() %--% next_year) / ddays(1)
## Example 1
# interval 생성
last_year <- today() - years(1)
(last_year %--% today()) / ddays(1)
(last_year %--% today()) / days(1)
last_year
## Example 1
# interval 생성
last_year <- today() - years(1)
llast_year <- today() - years(2)
(llast_year %--% last_year) / days(1)
(llast_year %--% last_year) / ddays(1)
(llast_year %--% last_year) %/% days(1)
years(1) / days(1)
(today() %--% next_year) / ddays(1)
(ymd("2024-01-01") %--% ymd("2025-01-01")) / ddays(1)
(today() %--% next_year) / ddays(1)
(ymd("2024-01-01") %--% ymd("2025-01-01")) / ddays(1)
(today() %--% next_year) / days(1)
(ymd("2024-01-01") %--% ymd("2025-01-01")) / days(1)
1470/196
years(1) %/% days(1)
library(forcats)
gss_cat %>%
mutate(race = fct_infreq(race)) %>%           # 각 수준의 빈도에 대해 내림차순 재정렬
ggplot(aes(race, fill = race)) +
geom_bar() +
scale_x_discrete(drop = FALSE) +            # 값이 없는 팩터의 수준(labels)을 표시
scale_fill_manual(values = c("#d1495b", "#edae49", "#66a182", "#2389da")) +
theme(axis.title = element_text(size = 10),
axis.text = element_text(size = 10)) +
labs(x = "", y = "frequency")
library(ggplot2)
library(forcats)
gss_cat %>%
mutate(race = fct_infreq(race)) %>%           # 각 수준의 빈도에 대해 내림차순 재정렬
ggplot(aes(race, fill = race)) +
geom_bar() +
scale_x_discrete(drop = FALSE) +            # 값이 없는 팩터의 수준(labels)을 표시
scale_fill_manual(values = c("#d1495b", "#edae49", "#66a182", "#2389da")) +
theme(axis.title = element_text(size = 10),
axis.text = element_text(size = 10)) +
labs(x = "", y = "frequency")
library(tidyverse)
library(forcats)
gss_cat %>%
mutate(race = fct_infreq(race)) %>%           # 각 수준의 빈도에 대해 내림차순 재정렬
ggplot(aes(race, fill = race)) +
geom_bar() +
scale_x_discrete(drop = FALSE) +            # 값이 없는 팩터의 수준(labels)을 표시
scale_fill_manual(values = c("#d1495b", "#edae49", "#66a182", "#2389da")) +
theme(axis.title = element_text(size = 10),
axis.text = element_text(size = 10)) +
labs(x = "", y = "frequency")
gss_cat %>%
mutate(race = fct_infreq(race)) %>%                 # 각 수준의 빈도가 큰 순서대로 재정렬
ggplot(aes(race, fill = race)) +
geom_bar() +
scale_x_discrete(drop = FALSE) +            # 값이 없는 팩터의 수준(labels)을 표시
scale_fill_manual(values = c("#d1495b", "#edae49", "#66a182", "#2389da")) +
theme(axis.title = element_text(size = 10),
axis.text = element_text(size = 10)) +
labs(x = "", y = "frequency") +
theme(legend.position = "none")
gss_cat %>%
mutate(race = fct_infreq(race)) %>%                 # 각 수준의 빈도가 큰 순서대로 재정렬
ggplot(aes(race, fill = race)) +
geom_bar() +
scale_x_discrete(drop = FALSE) +            # 값이 없는 팩터의 수준(labels)을 표시
scale_fill_manual(values = c("#d1495b", "#edae49", "#66a182", "#2389da")) +
theme(axis.title = element_text(size = 15),
axis.text = element_text(size = 15)) +
labs(x = "", y = "frequency") +
theme(legend.position = "none")
gss_cat %>%
mutate(race = fct_infreq(race)) %>%                 # 각 수준의 빈도가 큰 순서대로 재정렬
ggplot(aes(race, fill = race)) +
geom_bar() +
scale_x_discrete(drop = FALSE) +            # 값이 없는 팩터의 수준(labels)을 표시
scale_fill_manual(values = c("#d1495b", "#edae49", "#66a182", "#2389da")) +
theme(axis.title = element_text(size = 15),
axis.text = element_text(size = 10)) +
labs(x = "", y = "frequency") +
theme(legend.position = "none")
gss_cat %>%
mutate(race = fct_infreq(race)) %>%                 # 각 수준의 빈도가 큰 순서대로 재정렬
ggplot(aes(race, fill = race)) +
geom_bar() +
scale_x_discrete(drop = FALSE) +            # 값이 없는 팩터의 수준(labels)을 표시
scale_fill_manual(values = c("#d1495b", "#edae49", "#66a182", "#2389da")) +
theme(axis.title = element_text(size = 10, margin = margin(l=15)),
axis.text = element_text(size = 10)) +
labs(x = "", y = "frequency") +
theme(legend.position = "none")
gss_cat %>%
mutate(race = fct_infreq(race)) %>%                 # 각 수준의 빈도가 큰 순서대로 재정렬
ggplot(aes(race, fill = race)) +
geom_bar() +
scale_x_discrete(drop = FALSE) +            # 값이 없는 팩터의 수준(labels)을 표시
scale_fill_manual(values = c("#d1495b", "#edae49", "#66a182", "#2389da")) +
theme(axis.title = element_text(size = 10, margin = margin(l=15)),
axis.text = element_text(size = 10)) +
labs(x = "", y = "frequency") +
theme(legend.position = "none")
gss_cat %>%
mutate(race = fct_infreq(race)) %>%                 # 각 수준의 빈도가 큰 순서대로 재정렬
ggplot(aes(race, fill = race)) +
geom_bar() +
scale_x_discrete(drop = FALSE) +            # 값이 없는 팩터의 수준(labels)을 표시
scale_fill_manual(values = c("#d1495b", "#edae49", "#66a182", "#2389da")) +
theme(axis.title = element_text(size = 15, margin = margin(l=15)),
axis.text = element_text(size = 10)) +
labs(x = "", y = "frequency") +
theme(legend.position = "none")
gss_cat %>%
mutate(race = fct_infreq(race)) %>%                 # 각 수준의 빈도가 큰 순서대로 재정렬
ggplot(aes(race, fill = race)) +
geom_bar() +
scale_x_discrete(drop = FALSE) +            # 값이 없는 팩터의 수준(labels)을 표시
scale_fill_manual(values = c("#d1495b", "#edae49", "#66a182", "#2389da")) +
theme(axis.title = element_text(size = 15, margin = margin(l=20)),
axis.text = element_text(size = 10)) +
labs(x = "", y = "frequency") +
theme(legend.position = "none")
gss_cat %>%
mutate(race = fct_infreq(race)) %>%                 # 각 수준의 빈도가 큰 순서대로 재정렬
ggplot(aes(race, fill = race)) +
geom_bar() +
scale_x_discrete(drop = FALSE) +            # 값이 없는 팩터의 수준(labels)을 표시
scale_fill_manual(values = c("#d1495b", "#edae49", "#66a182", "#2389da")) +
theme(axis.title = element_text(size = 15, margin = margin(r=10)),
axis.text = element_text(size = 10)) +
labs(x = "", y = "frequency") +
theme(legend.position = "none")
gss_cat %>%
mutate(race = fct_infreq(race)) %>%                 # 각 수준의 빈도가 큰 순서대로 재정렬
ggplot(aes(race, fill = race)) +
geom_bar() +
scale_x_discrete(drop = FALSE) +            # 값이 없는 팩터의 수준(labels)을 표시
scale_fill_manual(values = c("#d1495b", "#edae49", "#66a182", "#2389da")) +
theme(axis.title = element_text(size = 15, margin = margin(r=10)),
axis.text = element_text(size = 10)) +
labs(x = "", y = "frequency") +
theme(legend.position = "none")
gss_cat %>%
mutate(race = fct_infreq(race)) %>%                 # 각 수준의 빈도가 큰 순서대로 재정렬
ggplot(aes(race, fill = race)) +
geom_bar() +
scale_x_discrete(drop = FALSE) +            # 값이 없는 팩터의 수준(labels)을 표시
scale_fill_manual(values = c("#d1495b", "#edae49", "#66a182", "#2389da")) +
theme(axis.title = element_text(size = 15, margin = margin(r=100)),
axis.text = element_text(size = 10)) +
labs(x = "", y = "frequency") +
theme(legend.position = "none")
gss_cat %>%
mutate(race = fct_infreq(race)) %>%                 # 각 수준의 빈도가 큰 순서대로 재정렬
ggplot(aes(race, fill = race)) +
geom_bar() +
scale_x_discrete(drop = FALSE) +            # 값이 없는 팩터의 수준(labels)을 표시
scale_fill_manual(values = c("#d1495b", "#edae49", "#66a182", "#2389da")) +
theme(axis.title.y = element_text(size = 15, margin = margin(r=100)),
axis.text = element_text(size = 10)) +
labs(x = "", y = "frequency") +
theme(legend.position = "none")
gss_cat %>%
mutate(race = fct_infreq(race)) %>%                 # 각 수준의 빈도가 큰 순서대로 재정렬
ggplot(aes(race, fill = race)) +
geom_bar() +
scale_x_discrete(drop = FALSE) +            # 값이 없는 팩터의 수준(labels)을 표시
scale_fill_manual(values = c("#d1495b", "#edae49", "#66a182", "#2389da")) +
theme(axis.title.y = element_text(size = 15, margin = margin(r=10)),
axis.text = element_text(size = 10)) +
labs(x = "", y = "frequency") +
theme(legend.position = "none")
# 항공편 출발 요일의 분포 시각화
library(lubridate)
library(nycflights13)
# 예정된 도착 일시, 실제 출발 일시, 실제 도착 일시를 date-time 형식으로 생성
make_datetime_100 <- function(year, month, day, time) {
make_datetime(year, month, day, time %/% 100, time %% 100)
}
flights_dt <- flights %>%
filter(!is.na(dep_time), !is.na(arr_time)) %>%
mutate(dep_time = make_datetime_100(year, month, day, dep_time),
arr_time = make_datetime_100(year, month, day, arr_time),
sched_dep_time = make_datetime_100(year, month, day, sched_dep_time),
sched_arr_time = make_datetime_100(year, month, day, sched_arr_time)) %>%
select(origin, dest, ends_with("delay"), ends_with("time"))
# 시각화
library(RColorBrewer)
flights_dt %>%
mutate(wday = wday(dep_time, label = TRUE)) %>%
ggplot(aes(x = wday, fill = wday)) +
geom_bar() +
scale_fill_manual(values = brewer.pal(7, "Spectral"))
install.packages(c("bit", "bit64", "bookdown", "broom", "bslib", "chron", "classInt", "cli", "commonmark", "cpp11", "curl", "data.table", "datawizard", "diffobj", "doBy", "epiR", "evaluate", "flextable", "fontawesome", "fs", "gdtools", "generics", "gert", "ggiraph", "ggplot2", "ggstats", "gtable", "Hmisc", "httpuv", "httr2", "insight", "jpeg", "jsonlite", "knitr", "later", "leafem", "lme4", "lpSolve", "lubridate", "maps", "markdown", "MatrixModels", "maxstat", "mime", "miniUI", "mlbench", "multcomp", "mvtnorm", "nloptr", "officer", "openssl", "openxlsx", "pander", "pbkrtest", "pillar", "pkgbuild", "pkgdown", "processx", "promises", "ps", "purrr", "quantreg", "R6", "ragg", "raster", "Rcpp", "readxl", "renv", "rlang", "rmarkdown", "rsconnect", "RSQLite", "rstudioapi", "s2", "sass", "scales", "sessioninfo", "sf", "shiny", "sp", "stars", "stringi", "svglite", "systemfonts", "terra", "testthat", "textshaping", "TH.data", "tinytex", "tmap", "tmaptools", "tzdb", "units", "usethis", "utf8", "waldo", "withr", "wk", "xfun", "XML", "xml2", "zip", "zoo"))
library(nycflights13)
library(nycflights13)
library(nycflights13)
library(MASS)
ggplot(birthwt, aes(x = bwt)) +
geom_histogram(fill = "darkgreen") +
labs(title="Histogram of birthweigth", x = "Birthweight(in gram)", y ="") +
theme_classic()
library(tidyverse)
ggplot(birthwt, aes(x = bwt)) +
geom_histogram(fill = "darkgreen") +
labs(title="Histogram of birthweigth", x = "Birthweight(in gram)", y ="") +
theme_classic()
labels <- c("1" = "Smoker", "0" = "Nonsmoker")
ggplot(birthwt, aes(x = bwt, fill = smoke)) +
geom_histogram(binwidth = 200) +
labs(title="Histogram of birthweigth", x = "Birthweight(in gram)", y ="") +
facet_grid(smoke ~ ., labeller = labeller(smoke = labels)) +             # 화면 분할
theme(plot.title = element_text(hjust = 0.5),                            # 제목 가운데 정렬
legend.position = "none")
ggplot(birthwt, aes(x = factor(race), y = bwt)) +
geom_boxplot() +
coord_flip()
bp <- birthwt %>%
mutate(smoke = fct_recode(as_factor(smoke), "Smoker" = "1", "Nonsmoker" = "0"),
ui = fct_recode(as_factor(ui), "Presence" = "1", "None" = "0")) %>%
ggplot(aes(x = factor(race), y = bwt)) +
geom_boxplot() +
facet_grid(ui ~ smoke)
bp + geom_point(color = "red", alpha = 0.5)
bp + geom_jitter(color = "red", alpha = 0.5)  # 관측값을 상자 그림 위에 겹쳐서 나타냄
starwars
starwars
ggplot(birthwt, aes(x = factor(race), y = bwt)) +
geom_boxplot() +
coord_flip()
bp <- birthwt %>%
mutate(smoke = fct_recode(as_factor(smoke), "Smoker" = "1", "Nonsmoker" = "0"),
ui = fct_recode(as_factor(ui), "Presence" = "1", "None" = "0")) %>%
ggplot(aes(x = factor(race), y = bwt)) +
geom_boxplot() +
facet_grid(ui ~ smoke)
bp + geom_point(color = "red", alpha = 0.5)
starwars %>% count(gender)
library(dplyr)
library(ggplot2)
library(forcats)
# 전처리: NA 제거 + 새로운 변수 추가 (force_sensitive)
sw <- starwars %>%
filter(!is.na(mass), !is.na(gender), !is.na(species)) %>%
mutate(
gender = fct_lump_min(gender, min = 5),               # 희귀한 gender 묶기
species = fct_lump_min(species, min = 5),             # 희귀한 종족 묶기
force_sensitive = if_else(str_detect(name, "Yoda|Luke|Anakin|Obi|Darth"),
"Yes", "No") |> factor()
)
# 기본 boxplot
p <- ggplot(sw, aes(x = species, y = mass)) +
geom_boxplot() +
coord_flip()
# facet 추가 (force_sensitive by gender)
p_facet <- sw %>%
ggplot(aes(x = species, y = mass)) +
geom_boxplot() +
facet_grid(force_sensitive ~ gender) +
coord_flip()
# point 추가
p_facet + geom_point(color = "red", alpha = 0.5)
# jitter 추가
p_facet + geom_jitter(color = "red", alpha = 0.5)
ToothGrowth
birthwt
library(ggplot2)
library(dplyr)
# 기본 boxplot
p <- ggplot(ToothGrowth, aes(x = supp, y = len)) +
geom_boxplot()
# faceting: dose별 분할
p_facet <- ggplot(ToothGrowth, aes(x = supp, y = len)) +
geom_boxplot() +
facet_grid(. ~ dose)
# point 추가
p_facet + geom_point(color = "red", alpha = 0.5)
# jitter 추가
p_facet + geom_jitter(color = "red", alpha = 0.5)
# 비타민 C 투여 형태별 치아 길이에 대한 상자 그림
ggplot(ToothGrowth, aes(x = supp, y = len)) +
geom_boxplot()
# 비타민 C 투여 형태별 치아 길이에 대한 상자 그림
ggplot(ToothGrowth, aes(x = supp, y = len)) +
geom_boxplot() +
coord_flip()
ToothGrowth
msleep
msleep %>% count(conversation)
rlang::last_trace()
msleep %>% count(conservation)
mpg %>% count(fl)
mpg %>% count(class)
bookdown::render_book("index.Rmd", output_dir = "docs")
library(palmerpenguins)
install.packages("palmerpenguins")
penguins
library(palmerpenguins)
penguins
penguins %>% count(island)
bookdown::render_book("index.Rmd", output_dir = "docs")
library(bookdown)
install.packages("xfun")
library(bookdown)
bookdown::render_book("index.Rmd", output_dir = "docs")
install.packages(c("cli", "data.table", "epiR", "rlang", "s2", "sf", "svglite", "terra", "utf8", "zip"))
