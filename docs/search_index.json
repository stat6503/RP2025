[["index.html", "R 프로그래밍 강의 소개 교과 목표 평가 방법 참고 문헌", " R 프로그래밍 Park Sejin 2025-03-03 강의 소개 교과 목표 본 강의에서는 통계분석도구인 R의 기본적인 문법 및 사용법을 학습하고, 최종적으로 프로그래밍 언어에 대한 기본 소양을 쌓음으로써 향후 고급 분석을 위한 기초를 탄탄히 하고자 한다. 평가 방법 중간(40%), 기말(40%), 출석(10%), 과제(10%) 총 수업시간의 1/4 이상 결석 시 F학점 처리 결석 1회당 1점 감점하며, 3번의 지각은 결석 1번으로 처리 참고 문헌 누구나 R 데이터 분석 / 이윤환 / 2022 / 한빛아카데미 혼자 공부하는 R 데이터 분석 / 강전희, 엄동란 / 2022 / 한빛미디어 모두를 위한 R 데이터 분석 입문 / 오세종 / 2019 / 한빛아카데미 R 기반 데이터 과학: 타이디버스(tidyverse) 접근 / 2018 / 한나래출판사 R과 knitr를 활용한 데이터 연동형 문서 만들기 / 고석범 / 2014 / 에이콘출판주식회사 website: R for Data Science website: R 프로그래밍(개정판) "],["데이터-분석과-r.html", "Chapter 1 데이터 분석과 R 1.1 데이터의 이해 1.2 R 및 R Studio 설치", " Chapter 1 데이터 분석과 R 1.1 데이터의 이해 1.1.1 데이터의 시대 정보화 시대(the age of information) → 데이터의 시대(the age of data) 우리를 둘러싼 모든 것들이 데이터 소스와 연결되고, 생활의 많은 부분이 데이터에 의존하여 영위함 예 : E-mail, SNS, 전화사용 기록, 신용카드거래 기록, 병원진료 기록, 대중교통 승하차 기록 등 4차 산업혁명 인공지능(AI), 빅데이터(big data), 로봇, 사물인터넷(IoT), 생명공학기술, 3D 프린터 등 새로운 과학기술이 사회, 경제, 문화 전반에 영향을 미치게 되고, 이러한 변화를 잘 수용하고 가능성을 최대화 하는 시대 향후 데이터를 잘 다룰 줄 아는 기업과 개인이 경쟁에서 우위를 점할 것임 1.1.2 데이터 과학 데이터 과학 과학적 방법, 프로세스, 알고리즘 및 시스템을 사용하여 구조화된(정형) 데이터와 구조화되지 않은(비정형) 데이터를 통해 지식과 통찰력을 추출하고 광범위한 활용 영역에서 실행 가능한 통찰력을 적용하는 융합 분야 데이터를 통해 실제 현상을 이해하고 분석하기 위해 통계학, 데이터 분석, 기계학습과 연관된 방법론을 통합하는 개념 Drew Conway는 데이터 과학은 (1) 컴퓨터 과학 역량(hacking skills), (2) 수학과 통계학 지식(math and statistics knowledge), (3) 분야별 전문지식(substantive expertise)의 교집합이라 소개함 Hadley Wickham이 제시한 데이터 과학의 과정 데이터 가져오기 분석할 데이터를 가져오는 단계로, 파일, Open API, 데이터베이스 등 다양한 데이터 소스를 분석 시스테으로 가져와 읽어 들이는 단계 정리하기(tidy) 가져온 데이터를 일괄된 형태로 재구조화하는 단계 이 단계를 통해 정리한 데이터를 tidy data라 명명함 변환하기(transform) tidy data에서 필요로 하는 새로운 값을 구하거나, 분석에 필요한 데이터로 변환하는 과정 시각화(visualization) 데이터에서 의미를 도출하는 과정 중 하나로, 시각을 통해 의미를 전달함 좋은 시각화는 예상하지 못한 것을 보여줄 수도 있고, 데이터를 잘 이해할 수 있도록 만들어 한 차원 높은 질문을 이끌어 낼 수도 있음 모델링(model) 데이터를 통해 수립한 모델을 이용하여 예측 등의 과정을 수행하는 단계 향후 머신러닝으로 확장되기도 함 소통하기(communicate) 데이터에서 찾아낸 세상의 모습을 다른 사람들에게 공유하는 과정 1.2 R 및 R Studio 설치 1.2.1 R 통계 분석 과정에서 수행되는 복잡한 계산이나 시각화 기법 등을 쉽게 사용할 수 있도록 설계된 프로그래밍 언어 및 환경 1976년 AT&amp;T의 Bell Labs Statistics Group에서 개발한 프로그래밍 언어 S를 향상시켜 1993년 뉴질랜드 오클랜드 대학의 Ross Ihaka Robert Gentleman이 R을 개발함 현재 R은 통계학 및 컴퓨터 과학 분야 등의 학자들로 이루어진 R Development Core Team에 의해 지속적으로 유지 및 개선되고 있음 무료로 제공되는 오픈소스 소프트웨어 접근성이 뛰어나 전 세계 많은 사용자들을 단시간에 확보할 수 있었음 패키지(package)를 통한 확장성이 뛰어나 다른 R 사용자들이 개발한 새로운 분석기법을 자유롭게 추가할 수 있음 다른 소프트웨어에 비해 최신 이론이나 기법을 사용하기 쉬움 다양한 통계분석 및 뛰어난 그래픽 기능 편리한 도움말 기능 프로그램 명령어를 직접 입력하는 방식 1.2.2 R Studio R과 사용자 사이의 편리한 인터페이스를 제공하는 통합개발환경(IDE) R 구동 시 사용자가 이용하는 모든 기능들 및 도구들을 통합하여 나타냄 다양하고 효과적인 편집기능을 제공하여 작업 수행의 생산성을 높임 필요한 파일이나 함수를 빨리 찾을 수 있도록 도움 1.2.3 프로그램 설치 R R Studio 1.2.4 R Studio 화면 구성 R Studio 화면은 4개의 영역으로 구성됨 편집(script) 영역 콘솔(console) 영역 환경(environment) 영역 파일(files) 영역 "],["r-기초.html", "Chapter 2 R 기초 2.1 산술연산 2.2 산술연산 함수 2.3 주석(comment) 2.4 자료형(data type) 2.5 논리연산 2.6 함수(function) 2.7 변수", " Chapter 2 R 기초 2.1 산술연산 연산자 의미 + 덧셈 - 뺄셈 * 곱셈 / 나눗셈 %% 나눗셈의 나머지 ^ 제곱 2.2 산술연산 함수 함수 의미 log() 로그함수 sqrt() 제곱근 abs() 절대값 factorial() 계승(factorial) sin(), cos(), tan() 삼각함수 log(10) sqrt(16) abs(-7) factorial(3) sin(pi/2) 2.3 주석(comment) 명령문의 의미를 보다 정확하게 설명한 것으로, # 다음에 주석의 내용을 작성함 주석은 실행 명령문이 아니므로 R은 주석을 제외하고 실제 명령문 부분만 실행 작성자가 나중에 R 프로그램을 다시 보거나 제 3자가 볼 때 프로그램의 내용을 쉽게 이해할 수 있도록 도와줌 2.4 자료형(data type) 변수에 저장할 수 있는 값의 종류 자료형 예 설명 숫자형 1, -1, 2.5 정수와 실수 모두 가능 문자형 ‘Hello’, “World” 작은 따옴표나 큰 따옴표로 묶어서 표현 논리형 TRUE, FALSE 반드시 대문자 표기, T나 F로 줄여서 사용 가능 특수값 NULL 정의되지 않음을 의미 특수값 NA 결측값(missing value) 특수값 NaN 수학적으로 정의가 불가능한 값 2.5 논리연산 연산의 결과가 TRUE 또는 FALSE로 출력됨 연산자 예 &lt; A &lt; B &lt;= A &lt;= B &gt; A &gt; B &gt;= A &gt;= B == A == B != A != B &amp; A &amp; B 2 &lt; 5 # TRUE 2 &lt;= 5 # TRUE 2 &gt; 5 # FALSE 2 &gt;= 5 # FALSE 2 == 5 # FALSE 2 != 5 # TRUE (2 &lt; 5) | (10 &lt;= 3) # TRUE | FALSE -&gt; TRUE (2 &lt; 5) &amp; (10 &lt;= 3) # TRUE &amp; FALSE -&gt; FALSE 2.6 함수(function) 함수에 어떤 입력값(input)을 주면 일련의 과정을 거쳐서 계산된 결과값(output)을 내보내는 구조 입력값은 매개변수(parameter)라고도 하며, 하나의 함수는 여러 개의 매개변수를 가질 수 있음 함수의 정의에 맞추어 매개변수를 입력하면 정의된 결과값을 얻을 수 있음 2.7 변수 2.7.1 변수 값 할당 어떤 값을 저장할 수 있는 공간 할당 연산자 &lt;-를 이용하여 변수에 값을 저장할 수 있음 할당(assign) : 프로그래밍에서 사용자가 저장 공간에 원하는 값을 저장하는 것 단축키 alt + - 변수에 저장된 값을 확인하려면 변수명을 입력하거나 print() 함수를 사용 var1 &lt;- 10 var2 &lt;- 20 total &lt;- var1 + var2 변수명 지정 규칙 첫 문자는 반드시 영문자나 마침표(.)로 시작 두 번째 문자부터는 영문자, 숫자, 마침표(.), 밑줄(_) 사용 가능 대문자와 소문자를 구분 변수명 중간에 빈칸을 넣을 수 없음 2.7.2 변수 값 변경 변수에 저장된 값은 언제라도 변경 가능 자료형은 어떤 값을 저장하는가에 따라 유동적으로 바뀜 var1 &lt;- 10 var2 &lt;- 20 total &lt;- var1 + var2 # var1 + var2 결과 출력 var1 &lt;- &quot;a&quot; # var1를 문자 a로 변경 total &lt;- var1 + var2 # error 발생 "],["데이터와-자료구조.html", "Chapter 3 데이터와 자료구조 3.1 데이터 이해 3.2 벡터(vector) 3.3 행렬(matrix)과 데이터프레임(data frame) 3.4 외부 파일 읽기 및 쓰기", " Chapter 3 데이터와 자료구조 3.1 데이터 이해 3.1.1 데이터 구조화 특정 기록을 분석하기 위해서는 해당 기록이 일정한 형태로 정리되어 있어야 하며, 대표적인 형태가 바로 테이블(table)임 논리적으로 데이터를 정리하여 표 형태로 만드는 것을 데이터 구조화 또는 정형화라고 함 구조화된 데이터는 쉽게 입력되고, 저장·분류할 수 있음 비정형 데이터는 일정한 형태나 구조, 관계가 존재하지 않는 데이터로, 제대로 된 분석을 위해서는 이를 정형 데이터로 변형할 수 있어야 함 3.1.2 테이블(table) 데이터의 저장형태로, 동질적인 데이터 값인 열과 하나의 데이터 집합인 행으로 구성됨 3.2 벡터(vector) 3.2.1 벡터 이해 데이터 구조의 가장 기본적인 형태로, 1차원 형태의 데이터를 저장할 수 있는 저장소 변수는 하나의 값을 저장하나, 벡터는 성격이 같은 여러 개의 값도 저장할 수 있음 c() 함수를 이용하여 벡터를 생성 하나의 벡터에는 동일한 종류의 자료형이 저장되어야 함 문자와 숫자를 함께 사용하여 벡터에 저장하면, 숫자는 모두 문자로 바뀜 v1 &lt;- c(1, 2, 3, 4, 5) # 숫자형 벡터 v2 &lt;- c(&quot;a,&quot;, &quot;b&quot;, &quot;c&quot;) # 문자형 벡터 v3 &lt;- c(TRUE, FALSE, FALSE) # 논리형 벡터 v4 &lt;- c(1, 2, 3, &quot;a&quot;, &quot;b,&quot;, &quot;c&quot;) # 문자형 벡터 연속적인 숫자로 이루어진 벡터 생성 - : 일정한 간격의 숫자로 이루어진 벡터 생성 - seq(시작값, 종료값, 간격) 반복된 숫자로 이루어진 벡터 생성 - rep(반복대상값, 반복횟수) 함수 v5 &lt;- 1:10 # 1~10 값을 출력 v6 &lt;- seq(1, 10, 2) # 1~10 사이의 홀수만 출력 v7 &lt;- rep(1:5, times = 3) # 1~5 값을 3번 반복 v8 &lt;- rep(1:5, each = 3) # 1~5 값을 각각 3번 반복 3.2.2 인덱스(index) 벡터에 저장된 각각의 값들을 구별하기 위하여 앞쪽의 값부터 시작하여 부여한 순서값 인덱스를 통해 벡터의 특정 위치에 저장된 값들을 하나 또는 여러 개 추출할 수 있음 인덱스는 [ ]를 이용하여 나타냄 v &lt;- c(6, 8, 1, 9, 7) v[1] # 6 v[6] # NA 3.2.3 원소값 추출 벡터에서 가져오고 싶은 값들의 인덱스를 c() 함수로 묶어서 [] 안에 입력 가능 인덱스 부분에 -를 사용하면 해당 인덱스를 제외한 나머지 값을 출력함 v &lt;- c(6, 8, 1, 9, 7) v[1:3] # 6, 8, 1 값을 출력 v[-5] # 5번째 인덱스만 제외하고 출력 3.2.4 벡터 산술연산 벡터에 대한 산술연산은 벡터 안에 포함된 모든 값들에 대한 연산으로 바뀌어 실행됨 벡터와 벡터 간의 연산은 대응되는 위치에 있는 값끼리의 연산으로 바뀌어 실행됨 v9 &lt;- c(3, 7, 6) v10 &lt;- c(4, 2, 8) v9 + 2 # 5, 9, 8 값을 출력 v9 - v10 # -1, 5, -2 값을 출력 벡터에 적용 가능한 함수 함수 설명 sum() 벡터에 포함된 값들의 합 mean() 벡터에 포함된 값들의 평균 median() 벡터에 포함된 값들의 중앙값 max() 벡터에 포함된 값들의 최대값 min() 벡터에 포함된 값들의 최소값 var() 벡터에 포함된 값들의 분산 sd() 벡터에 포함된 값들의 표준편차 length() 벡터에 포함된 값들의 개수(길이) 3.2.5 논리연산자 연산의 결과가 TRUE 또는 FALSE로 출력되는 것 논리연산자를 벡터에 적용하여 조건에 맞는 값들을 추출 가능 함수 예 설명 &lt; A &lt; B A보다 B가 크면 TRUE &gt; A &gt; B A보다 B가 작으면 TRUE &lt;= A &lt;= B A보다 B가 크거나 같으면 TRUE &gt;= A &gt;= B A보다 B가 작거나 같으면 TRUE == A == B A와 B가 같으면 TRUE != A != B A와 B가 같지 않으면 TRUE &amp; A &amp; B A와 B 모두가 TRUE이면 TRUE | A|B A와 B 둘 중 하나라도 TRUE이면 TRUE 논리연산도 벡터에 포함된 각각의 값에 대한 연산으로 바뀌어 실행됨 논리값이 산술연산에 사용되면 FALSE는 0으로, TRUE는 1로 간주됨 v11 &lt;- 1:10 v11 &gt;= 5 # 각 원소가 5보다 크거나 같으면 TRUE, 아니면 FALSE 출력 v11[v11 &gt;= 5] # 5보다 크거나 같은 값 출력 sum(v11 &lt; 5) # 5보다 작은 값의 개수 출력 sum(v11[v11 &lt; 5]) # 5보다 작은 값의 합계 출력 3.2.6 리스트(list) 서로 다른 자료형의 값들을 1차원 배열에 저장하고 다룰 수 있도록 함 list() 함수를 이용하여 리스트를 생성 리스트에 저장된 값은 [[ ]]를 사용하거나, ’리스트이름$값의이름’의 형태로 추출할 수 있음 myinfo &lt;- list(name = &quot;Kim&quot;, age = 25, status = TRUE, score = c(70, 85, 90)) myinfo[[1]] # 첫번째 값인 &quot;Kim&quot; 출력 myinfo$score # 이름이 score인 벡터 값 출력 3.2.7 팩터(factor) 문자형 데이터가 저장된 벡터의 한 종류 성별, 혈액형 등과 같이 저장할 문자값들이 몇 종류로 정해져 있을 때 팩터를 사용함 문자형 벡터를 만든 뒤 factor() 함수를 이용하여 팩터를 생성 levels() 함수는 팩터에 저장된 값들의 종류를 알려줌 팩터는 사전에 정의된 값 외에 다른 값들은 입력하지 못하도록 함 season &lt;- c(&quot;spring&quot;, &quot;fall&quot;, &quot;winter&quot;, &quot;summer&quot;, &quot;summer&quot;, &quot;spring&quot;) season.new &lt;- factor(season) levels(season.new) season.new2 &lt;- factor(season, levels = c(&quot;spring&quot;, &quot;summer&quot;, &quot;fall&quot;, &quot;winter&quot;)) levels(season.new2) 3.3 행렬(matrix)과 데이터프레임(data frame) 1차원 데이터 : 단일 주제의 데이터 → 벡터 2차원 데이터 : 여러 주제의 데이터 → 매트릭스, 데이터프레임 3.3.1 행렬 이해 2차원 테이블 형태의 자료구조 모든 셀에 저장되는 값은 동일한 자료형이어야 함 matrix() 함수를 이용하여 행렬을 생성 매개변수 nrow, ncol - 행렬의 행과 열의 개수를 지정 매개변수 byrow - TRUE인 경우 행렬에 저장될 값들을 행 방향으로 채움, 기본값(default)은 FALSE m1 &lt;- matrix(1:20, nrow = 4, ncol = 5) m1 ## [,1] [,2] [,3] [,4] [,5] ## [1,] 1 5 9 13 17 ## [2,] 2 6 10 14 18 ## [3,] 3 7 11 15 19 ## [4,] 4 8 12 16 20 행과 열의 위치에 대한 2개의 인덱스값으로 특정 위치의 값을 추출할 수 있음 m1[2, 4] # 2행 4열에 위치한 값인 14 출력 m1[3, ] # 3행에 있는 모든 값 출력 m1[, 5] # 5열에 있는 모든 값 출력 rbind(), cbind() 함수를 이용하여 벡터 또는 행렬을 결합 m2 &lt;- matrix(1:12, nrow = 4, ncol = 3, byrow = TRUE) # 4x3 행렬 m3 &lt;- matrix(13:18, nrow = 2, ncol = 3) # 2x3 행렬 m4 &lt;- rbind(m2, m3) # 6x3 행렬 v &lt;- c(1:6) # 원소가 6개인 벡터 cbind(m4, v) # 6x4 행렬 rownames(), colnames() 함수를 이용하여 행과 열에 각각 이름을 지정 데이터를 이해하는데 도움이 됨 score &lt;- matrix(c(80, 67, 74, 82, 95, 88, 75, 84, 82), nrow = 3, ncol = 3, byrow = TRUE) rownames(score) &lt;- c(&quot;Kim&quot;, &quot;Lee&quot;, &quot;Park&quot;) colnames(score) &lt;- c(&quot;Kor&quot;, &quot;Eng&quot;, &quot;Math&quot;) score ## Kor Eng Math ## Kim 80 67 74 ## Lee 82 95 88 ## Park 75 84 82 3.3.2 데이터프레임 이해 서로 다른 형태의 데이터를 2차원 데이터 형태로 묶을 수 있는 자료구조 외관상으로는 행렬과 차이가 없지만 행렬에 저장되는 모든 값들은 동일한 자료형인 반면, 데이터프레임은 서로 다른 자료형의 값을 함께 저장할 수 있음 데이터프레임은 특정 열을 잘라서 보았을 때는 값들의 자료형이 동일해야 함 data.frame() 함수를 이용하여 데이터프레임 생성 일반적으로 여러 개의 벡터를 결합하는 형태 데이터프레임은 행렬과 동일한 방법으로 특정 위치의 값을 추출하거나, 행과 열의 이름을 지정할 수 있음 df1 &lt;- data.frame(name = c(&quot;Kim&quot;, &quot;Lee&quot;, &quot;Park&quot;, &quot;Choi&quot;), age = c(24, 25, 22, 27), btype = factor(c(&quot;A&quot;, &quot;B&quot;, &quot;O&quot;, &quot;B&quot;)), religion = c(TRUE, FALSE, TRUE, TRUE)) df1 ## name age btype religion ## 1 Kim 24 A TRUE ## 2 Lee 25 B FALSE ## 3 Park 22 O TRUE ## 4 Choi 27 B TRUE df1[1, 2] # 1행 2열에 위치한 값인 24 출력 df1[, 3] # 3열에 있는 btype 모든 값 출력 # 데이터프레임에서는 &#39;(데이터프레임 이름)$(열 이름)&#39;의 형태로 열 데이터를 추출할 수 있음 df1$btype df2 &lt;- cbind(df1, c(&quot;dog&quot;, &quot;cat&quot;, &quot;bird&quot;, &quot;dog&quot;)) colnames(df2)[5] &lt;- &quot;pet&quot; 3.3.3 행렬과 데이터프레임 다루기 3.3.3.1 기본 정보 확인 행렬과 데이터프레임은 모두 2차원 형태의 데이터를 저장하는 자료구조이기 때문에 다루는 방법이 대부분 동일함 dim(iris) # 행과 열의 개수 출력 nrow(iris) # 행의 개수 출력 ncol(iris) # 열의 개수 출력 colnames(iris) # 열 이름 출력, names( )와 결과 동일 head(iris) # 데이터셋의 앞부분 일부 출력 tail(iris) # 데이터셋의 뒷부분 일부 출력 str(iris) # 데이터셋 요약 정보 보기 iris[, 5] # 품종 데이터 보기 unique(iris[, 5]) # 품종의 종류 보기(중복 제거) table(iris[, &quot;Species&quot;]) # 품종의 종류별 행의 개수 세기 3.3.3.2 원소값 추출 subset() 함수 이용하여 조건에 맞는 행과 열의 값 추출할 수 있음 매개변수 subset - 행에 대한 조건을 지정 매개변수 select - 추출하고자 하는 열을 지정 iris.new1 &lt;- subset(iris, Species == &quot;setosa&quot;) iris.new2 &lt;- subset(iris, subset = Sepal.Length&gt;5.0 &amp; Sepal.Width&gt;4.0) iris.new3 &lt;- subset(iris, select = c(&quot;Sepal.Length&quot;, &quot;Sepal.Width&quot;)) 3.3.3.3 행렬 및 데이터프레임 산술연산 벡터와 같이 숫자로 구성된 행렬이나 데이터프레임도 각 원소에 대한 연산으로 바뀌어 실행됨 행렬과 행렬 간의 연산은 동일한 위치에 있는 값끼리의 연산으로 바뀌어 실행되므로, 두 행렬의 크기(행과 열의 개수)가 같아야 함 m1 &lt;- matrix(1:20, nrow = 4, ncol = 5) # 4x5 행렬 m2 &lt;- matrix(21:40, nrow = 4, ncol = 5) # 4x5 행렬 2 + m1 3 * m2 m1 + m2 m1 - m2 m1 * m2 m1 / m2 colSums(), colMeans(), rowSums(), rowMeans() 함수 이용하여 행별, 열별 합계 및 평균을 계산할 수 있음 colSums(iris[, -5]) # 열별 합계 colMeans(iris[, -5]) # 열별 평균 rowSums(iris[, -5]) # 행별 합계 rowMeans(iris[, -5]) # 행별 평균 3.4 외부 파일 읽기 및 쓰기 3.4.1 작업폴더 설정 setwd() 함수를 이용하여 작업할 폴더의 경로를 지정 setwd(&quot;D:/jbnu-R&quot;) 3.4.2 외부 파일 읽기 read.csv() 함수를 이용하여 외부에 있는 csv 파일을 불러옴 예제 - StudentSurvey.csv data &lt;- read.csv(&quot;StudentSurvey.csv&quot;) head(data) 3.4.3 외부 파일 쓰기 write.csv() 함수를 이용하여 외부로 csv 파일을 저장 smoking &lt;- subset(data, Smoke == &quot;Yes&quot;) write.csv(smoking, &quot;smoking.csv&quot;) "],["프로그래밍-구조.html", "Chapter 4 프로그래밍 구조 4.1 조건문(conditional statement) 4.2 반복문(repetitive statement) 4.3 사용자 정의 함수 4.4 R 패키지(R package)", " Chapter 4 프로그래밍 구조 프로그래밍(programming) - 컴퓨터를 이용하여 문제를 해결하기 위해 주어진 절차를 문법에 맞게 작성하는 과정 데이터 분석을 하다 보면 R에서 제공하는 함수만으로는 해결이 되지 않는 경우가 있으며, 이 경우 프로그래밍 기법의 적용이 필요함 4.1 조건문(conditional statement) 4.1.1 if-else 문 조건에 따라 특정 명령을 실행하는 프로그래밍 명령문으로, R에서는 if, else 등의 명령 키워드를 사용 if(비교조건) { 조건이 참일 때 실행할 명령문(들) } else { 조건이 거짓일 때 실행할 명령문(들) } if와 else 다음에 있는 중괄호 { }는 프로그래밍에서 코드블록이라고 하며, 이는 여러 명령문을 하나로 묶어주는 역할을 수행함 if-else 문을 작성시 else는 반드시 if 문의 코드블록이 끝나는 }와 같은 줄에 작성해야 함 [예제] 시험 점수가 80점 이상이면 합격(Pass), 80점 미만이면 불합격(Fail)으로 판단 score &lt;- 85 if(score &gt;= 80) { result &lt;- &quot;Pass&quot; } else { result &lt;- &quot;Fail&quot; } print(result) ## [1] &quot;Pass&quot; 조건문에서 if와 else가 항상 같이 사용되는 것은 아님 위의 예제에서 else 문을 생략하면 다음과 같이 작성할 수 있음 score &lt;- 85 result &lt;- &quot;Pass&quot; if(score &lt; 80) { result &lt;- &quot;Fail&quot; } print(result) ## [1] &quot;Pass&quot; 조건에 따라 두 값 중 하나를 선택하는 경우, ifelse 문을 이용하면 편리함 ifelse(비교조건, 조건이 참일 때 선택할 값, 조건이 거짓일 때 선택할 값) score &lt;- 85 result &lt;- ifelse(score &gt;= 80, &quot;Pass&quot;, &quot;Fail&quot;) print(result) ## [1] &quot;Pass&quot; 4.1.2 다중 if-else 문 if-else문은 반복적으로 이어서 사용할 수 있음 [예제] 시험 점수가 90점 이상이면 A학점, 80 ~ 89점이면 B학점, 70~79점이면 C학점, 60~69점이면 D학점, 59점 이하이면 F학점으로 판단 score &lt;- 85 if(score &gt;= 90) { grade &lt;- &#39;A&#39; } else if(score &gt;= 80) { grade &lt;- &#39;B&#39; } else if(score &gt;= 70) { grade &lt;- &#39;C&#39; } else if(score &gt;= 60) { grade &lt;- &#39;D&#39; } else { grade &lt;- &#39;F&#39; } print(grade) ## [1] &quot;B&quot; 4.1.3 조건문에서 논리연산자 사용 if 문에 논리연산자를 사용하면 복잡한 조건문을 서술할 수 있음 대표적인 논리연산자는 &amp;(and)와 |(or) 임 [예제] 고혈압 분류 분류 수축기 혈압 조건 이완기 혈압 정상 혈압 120 미만 and 80 미만 고혈압 전단계 120 ~ 139 or 80 ~ 89 1단계 고혈압 140 ~ 159 or 90~99 2단계 고혈압 160 이상 or 100 이상 sbp &lt;- 125 # 수축기 혈압(systolic blood pressure) dbp &lt;- 93 # 이완기 혈압(diastoic blood pressure) if(sbp &lt; 120 &amp; dbp &lt; 80) { bp.type &lt;- &quot;정상 혈압&quot; } else if((sbp &gt;= 120 &amp; sbp &lt;= 139) | (dbp &gt;= 80 &amp; dbp &lt;= 89)) { bp.type &lt;- &quot;고혈압 전단계&quot; } else if((sbp &gt;= 140 &amp; sbp &lt;= 159) | (dbp &gt;= 90 &amp; dbp &lt;= 99)) { bp.type &lt;- &quot;1단계 고혈압&quot; } else if(sbp &gt;= 160 | dbp &gt;= 100) { bp.type &lt;- &quot;2단계 고혈압&quot; } print(bp.type) # wrong! ## [1] &quot;고혈압 전단계&quot; 4.2 반복문(repetitive statement) 4.2.1 for 문 정해진 동작을 반복적으로 수행할 때 사용하는 명령문으로, R에서는 for 문, while 문을 사용함 for문은 가장 많이 사용하는 반복문으로, 범위를 지정하여 반복을 수행 for(반복변수 in 반복범위) { 반복할 명령문(들) } [예제] *을 5번 출력 for(i in 1:5) { print(&quot;*&quot;) } ## [1] &quot;*&quot; ## [1] &quot;*&quot; ## [1] &quot;*&quot; ## [1] &quot;*&quot; ## [1] &quot;*&quot; [예제] 구구단 2단 출력 print() 함수 - 하나의 값을 출력 cat() 함수 - 한 줄에 여러 개의 값을 결합하여 출력 \\n - 줄바꿈을 하도록 하는 특수문자 for(i in 1:9) { cat(&quot;2 *&quot;, i, &quot;=&quot;, 2*i, &quot;\\n&quot;) } ## 2 * 1 = 2 ## 2 * 2 = 4 ## 2 * 3 = 6 ## 2 * 4 = 8 ## 2 * 5 = 10 ## 2 * 6 = 12 ## 2 * 7 = 14 ## 2 * 8 = 16 ## 2 * 9 = 18 [예제] 1~20 사이의 숫자 중 짝수만 출력 for(i in 1:20) { if(i%%2 == 0) { print(i) } } ## [1] 2 ## [1] 4 ## [1] 6 ## [1] 8 ## [1] 10 ## [1] 12 ## [1] 14 ## [1] 16 ## [1] 18 ## [1] 20 [예제] 1~100 사이의 숫자의 합계 출력 어떤 변수를 계산에서 사용하려면, 그 변수를 먼저 선언해야 함 sum &lt;- 0 for(i in 100) { sum &lt;- sum + i } print(sum) ## [1] 100 [실습] iris 데이터셋에 대하여 꽃잎의 길이(Petal.Length)가 1.6 이하이면 Low, 5.1 이상이면 High, 나머지는 Middle로 분류 4.2.2 while 문 어떤 조건이 만족하는 동안 코드블록을 수행하고, 해당 조건이 거짓일 경우 반복문을 종료하는 명령문 조건문과 반복문이 결합한 형태라 할 수 있음 ※ 주의 : 영원히 실행되는 반복문을 ’무한루프(infinite loop)’라 하며, 컴퓨터의 작동을 멈출 수 있음 while(비교조건) { 반복할 명령문(들) } sum &lt;- 0 i &lt;- i while(i &lt;= 100) { sum &lt;- sum + i i &lt;- i + 1 } print(sum) ## [1] 100 4.2.3 break와 next break - 반복문을 중단시킴 next - 반복문의 시작 지점으로 되돌림 sum &lt;- 0 for(i in 1:10) { sum &lt;- sum + i if(i &gt;= 5) break } print(sum) # 1~5 사이의 값의 합계 출력 ## [1] 15 sum &lt;- 0 for(i in 1:10) { if (i%%2 == 0) next sum &lt;- sum + i } print(sum) # 1~10 사이의 숫자 중 홀수의 합계 출력 ## [1] 25 4.3 사용자 정의 함수 R 사용자들이 스스로 만든 자신만의 함수 자주 사용하는 R 코드를 함수 형태로 저장해 놓으면 손쉽게 작업할 수 있음 함수명 &lt;- function(매개변수 목록) { 실행할 명령문(들) return(함수의 실행 결과) } [예제] 두 개의 값을 입력받아 둘 중 큰 수를 결과 값으로 반환하는 함수 mymax &lt;- function(x, y) { max.value &lt;- x if (y &gt; x) { max.value &lt;- y } return(max.value) } mymax(10, 20) ## [1] 20 사용자 정의 함수에서도 매개변수의 초기값(default value)을 설정할 수 있음 [예제] 매개변수 x, y를 입력 받아 x/y 값을 반환하는 함수(단, y의 초기값은 2) mydiv &lt;- function(x, y=2) { result &lt;- x / y return(result) } mydiv(x = 10, y = 3) # 매개변수 이름과 매개변수 값을 쌍으로 입력 mydiv(10, 3) # 매개변수 값만 입력 mydiv(10) # x에 대한 값만 입력(y 값 생략) 여러 개의 값을 반환해야 하는 경우에는 이를 리스트로 묶어 반환함 [예제] 매개변수 x, y를 입력 받아 두 변수의 합계와 곱을 리스트로 반환하는 함수 myfunc &lt;- function(x, y) { sum.value &lt;- x + y mul.value &lt;- x * y return(list(sum = sum.value, mul = mul.value)) } result &lt;- myfunc(5, 8) result$sum # 5, 8의 합계 result$mul # 5, 8의 곱 4.4 R 패키지(R package) 특수 목적을 위한 로직으로 구성된 코드들의 집합을 R에서 구동되는 분석 툴 .lib() 함수 - 현재 설정된 패키지 저장 경로 확인 및 지정 install.packages() 함수 - 패키지 설치 library() 함수 - 설치된 패키지 불러오기 "],["tidyverse-통합-패키지.html", "Chapter 5 tidyverse 통합 패키지 5.1 tidyverse 이해 5.2 tidyverse 작업 흐름 5.3 타이디 데이터(tidy data) 5.4 파이프(pipe) 연산자 5.5 tibble 패키지 5.6 readr 패키지", " Chapter 5 tidyverse 통합 패키지 5.1 tidyverse 이해 Hadley Wickham이 개발한 데이터 과학을 위한 R 패키지의 집합체(collection) 모든 패키지는 공통적이고 일관된 설계 철학, 문법, 데이터 구조를 공유함 정돈된 세계(tidy + universe)를 구성하여 작업을 직관적이고 일관성있게 수행하도록 도와줌 tidy API의 4가지 원칙 기존 자료구조의 재사용(reuse existing data structures) 파이프 연산자를 이용한 단순한 함수 조합(compose simple function with pipe) 함수형 프로그래밍을 적극 포용(embrace functional programming) 사람을 위한 설계(design for humans) 패키지 설명 tibble tidyverse에서 사용하는 R 데이터 객체 제공 readr tibble 객체로 외부 파일을 불러오거나 저장하는 함수 제공 dplyr 데이터 가공, 탐색적 자료분석 등을 위한 함수 제공 tidyr 타이디 데이터(tidy data)를 구현하는 함수 제공 stringr 문자열(string)을 다루는 함수 제공 forcats 팩터(factor)를 다루는 함수 제공 lubridate, hms 날짜, 시간을 다루는 함수 제공 purrr 함수형 프로그래밍 도구 제공 ggplot2 데이터 시각화를 위한 함수 제공 5.2 tidyverse 작업 흐름 tidyverse 통합 패키지는 다음과 같은 데이터 분석 프로젝트의 작업 흐름을 지원하도록 설계됨 5.3 타이디 데이터(tidy data) tidyverse에서 사용되는 데이터 표준 저장 형태로, 분석에 용이하고 깔끔한(tidy) 데이터 타이디 데이터의 3가지 규칙 모든 열은 변수이다(Every column is variable). 모든 행은 관측값이다(Every row is an observation). 모든 셀은 단일 값을 가진다(Every cell is a single value). 5.4 파이프(pipe) 연산자 %&gt;% - 다중 연산을 하나의 순차적인 연산의 결합으로 표현하는 강력한 도구 단축키 ctrl + shift + m 데이터 연산의 흐름을 좌에서 우로 변경(기존 방식은 안에서 밖임) 왼쪽 표현식(left-hand side expression)의 결과를 오른쪽 표현식(right-hand side expression)으로 전달함 이때, lhs은 rhs의 첫번째 매개변수로 사용됨 lhs가 사용될 위치를 지정하기 위해서는 rhs에서 place-holder .를 사용해야 함 연산 작업 중 어느 위치에서나 쉽게 단계를 추가할 수 있음 복잡한 코드를 단순화시켜 가독성 크게 향상시킴 2014년 개발된 magrittr 패키지에 포함되어 있음 2021년 R version 4.1.0부터는 기본 파이프 연산자 |&gt; 새롭게 추가됨 # 데이터프레임 x에 f(), g(), h() 함수를 순차적으로 적용 # 일반적인 경우: 함수를 중첩해서 사용 h(g(f(x))) # 파이프 연산자를 사용하는 경우: 연쇄적인 연산의 결합으로 표현 x %&gt;% f() %&gt;% g() %&gt;% h() iris %&gt;% head iris %&gt;% head(10) &quot;World&quot; %&gt;% cat(&quot;Hello,&quot;, .) 5.5 tibble 패키지 5.5.1 tibble object tidyverse에서 사용하는 R 데이터 객체 좀 더 편리하게 사용할 수 있도록 수정된 특수한 종류의 데이터프레임으로, 데이터프레임과 근본적으로 큰 차이는 없음 데이터를 출력할 때 콘솔 창이 넘어가지 않도록 설계되어 있음 str() 함수 기능을 가져와 각 변수(열)의 유형을 변수명과 함께 표시 처음 10개의 행과 한 화면에 들어갈 수 있는 열만 표시 전체 데이터셋을 보기 위해서는 View() 함수 사용 입력 유형(input’s type)이 변하지 않음 변수명을 수정할 수 없으며, 행 이름과 산술연산을 지원하지 않음 변수 라벨 설명 &lt;chr&gt; 문자형(character) &lt;int&gt; 정수형(integer) &lt;dbl&gt; 실수형(double) &lt;date&gt; 날짜(date) &lt;time&gt; 시간(time) &lt;dttm&gt; 날짜와 시간(date-time) &lt;lgl&gt; 논리형(logical) +lbl 변수의 값에 부여된 라벨 값이 추가되어 있음을 표시 library(nycflights13) flights fligths %&gt;% View() 5.5.2 tibble 이해 새로운 tibble 생성 - tibble() 함수 길이가 1인 입력은 자동으로 재사용함 변수명 지정이 훨씬 유연함 - ``(backticks) 사용 library(tibble) mytbl &lt;- tibble( x = 1:5, y = 1, z = x ^ 2 + y ) mytbl ## # A tibble: 5 × 3 ## x y z ## &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 1 1 2 ## 2 2 1 5 ## 3 3 1 10 ## 4 4 1 17 ## 5 5 1 26 데이터프레임을 tibble로 변환 - as_tibble() 함수 tibble을 데이터프레임으로 변환 - as.data.frame() 함수 as_tibble(iris) as.data.frame(flights) 부분집합(subset)에 엄격하며, []은 항상 tibble을 반환함 하나의 열만 추출하려면 [[]] 또는 $을 사용 df &lt;- data.frame(x = 1:3, y = 3:1) class(df[, 1:2]) # &quot;data.frame&quot; class(df[, 1]) # &quot;integer&quot; tbl &lt;- tibble(x = 1:3, y = 3:1) class(tbl[, 1:2]) # &quot;tbl_df&quot; &quot;tbl&quot; &quot;data.frame&quot; class(tbl[, 1]) # &quot;tbl_df&quot; &quot;tbl&quot; &quot;data.frame&quot; class(tbl[[1]]) # &quot;integer&quot; class(tbl$x) # &quot;integer&quot; 5.6 readr 패키지 5.6.1 readr 패키지 소개 tibble 객체로 외부 파일을 불러오거나 저장하는 함수를 제공하는 패키지 함수 설명 read_csv() 쉼표로 구분된 파일 불러오기 read_tsv() 탭으로 구분된 파일 불러오기 read_delim() 임의의 구분자로 구분된 파일 불러오기 read_table() 공백으로 구분된 파일 불러오기 read_spss() spss 데이터 파일 불러오기 read_sas() sas 데이터 파일 불러오기(haven 패키지) 5.6.2 read_csv() 함수 read.csv() 함수에 비해 약 10배 정도 빠르며, 좀 더 재현성이 뛰어남 첫번째 줄은 변수명(header)으로 사용 매개변수 col_names - 변수명(header)이 없는 경우 사용 col_names = FALSE - 변수명을 X1부터 Xn까지 순차적으로 붙여줌 col_names = c(\"x\", \"y\", \"z\")와 같이 변수명으로 사용할 문자형 벡터를 입력 가능 매개변수 skip - 파일의 첫 n줄 생략 매개변수 na - 특정값을 결측값으로 지정 예제 - StudentSurvey.csv library(readr) data &lt;- read_csv(&quot;StudentSurvey.csv&quot;) data "],["데이터-전처리.html", "Chapter 6 데이터 전처리 6.1 dplyr 패키지 6.2 tidyr 패키지 6.3 stringr 패키지 6.4 forcats 패키지 6.5 lubridate 패키지", " Chapter 6 데이터 전처리 6.1 dplyr 패키지 6.1.1 dplyr 패키지 소개 탐색적 자료분석, 데이터 가공에 매우 유용하고 편리한 함수 제공 적용 대상에 따른 dplyr 함수 행: filter(), arrange() 열: select(), rename(), mutate(), relocate() 그룹: summarise(), group_by() 테이블 [예제] 2013년 뉴욕시 출발 항공편 데이터셋 flights 변수 설명 year 출발 연도 month 출발 월 day 출발 일 dep_time 실제 출발 시간(HHMM 또는 HMM) arr_time 실제 도착 시간(HHMM 또는 HMM) sched_dep_time 예정된 출발 시간(HHMM 또는 HMM) sched_arr_time 예정된 도착 시간(HHMM 또는 HMM) dep_delay 출발 지연 시간(분) arr_delay 도착 지연 시간(분) carrier 항공사 약어 flight 항공편 번호 tailnum 비행기 식별 번호 origin 출발지 dest 목적지 air_time 비행 시간(분) distance 비행 거리(miles) hour 예정된 출발 시간; 시 minute 예정된 출발 시간; 분 time_hour 예정된 비행 날짜 및 시간(POSIXct date) library(dplyr) library(nycflights13) glimpse(flights) 6.1.2 행 관련 함수 6.1.2.1 filter() 함수 조건에 맞는 행 추출 %in% 연산자 - 왼쪽의 값이 오른쪽에 있는 값들 중 어느 하나와 같으면 TRUE flights %&gt;% filter(arr_delay &gt;= 120) # 120분 이상 연착한 항공편 flights %&gt;% filter(month == 1 &amp; day == 1) # 1월 1일에 출발한 항공편 flights %&gt;% filter(month %in% c(3,5,8)) # 3,5,8월에 출발한 항공편 6.1.2.2 arrange() 함수 특정 변수를 기준으로 행 정렬, 기본값(default)은 오름차순 정렬 기준 변수가 여러 개인 경우 순차적으로 적용 desc() 함수 - 내림차순 정렬 flights %&gt;% arrange(year, month, day, dep_time) filghts %&gt;% arrange(desc(dep_delay)) # 가장 늦게 출발한 항공편 확인 flights %&gt;% filter(dep_delay &lt;= 10 &amp; dep_dalay &gt;= -10) %&gt;% # 대략 정시에 출발한 항공편 중에서 arrange(desc(arr_delay)) # 가장 늦게 도착한 항공편 확인 6.1.3 열 관련 함수 6.1.3.1 select() 함수 특정 변수 추출 추출한 변수명을 바꿀 수 있음 도우미(helpers) 함수 starts_with() 함수 - 특정 문자열로 시작하는 이름 매칭 ends_with() 함수 - 특정 문자열로 끝나는 이름 매칭 contains() 함수 - 특정 문자열을 포함하는 이름 매칭 num_range(\"x\", 1:3) 함수 - x1, x2, x3 매칭 flights %&gt;% select(year, month, day) # 출발 연월일 변수 추출 flights %&gt;% select(year:day) flights %&gt;% select(-(year:day)) # 출발 연월일 변수 제외 flights %&gt;% select(dep.time = dep_time, arr.time = arr_time) # 변수명 변경 flights %&gt;% select(starts_with(&quot;sched&quot;)) # 변수명 &quot;sched&quot;로 시작하는 경우 flights %&gt;% select(ends_with(&quot;time&quot;)) # 변수명 &quot;time&quot;으로 끝나는 경우 flights %&gt;% select(contains(&quot;arr&quot;)) # 변수명 &quot;arr&quot;를 포함하는 경우 6.1.3.2 rename() 함수 특정 변수명 변경 명시적으로 언급하지 않은 모든 변수를 유지함 flights %&gt;% rename(dep.time = dep_time, arr.time = arr_time) 6.1.3.3 mutate() 함수 데이터셋에 존재하는 변수로부터 새로운 변수 생성 새로운 변수는 항상 데이터셋 마지막 열에 추가됨 매개변수 .before - 새로운 변수를 특정 위치의 앞에 추가 매개변수 .after - 새로운 변수를 특정 위치의 뒤에 추가 flights %&gt;% mutate(gain = dep_delay - arr_delay) # 출발 지연 - 도착 지연(분) flights %&gt;% mutate(speed = distance / (air_time/60), .before = 1) # 첫번째 변수 앞에 추가 flights %&gt;% mutate(hour = air_time / 60, .after = air_time) # air_time 변수 뒤에 추가 6.1.3.4 relocate() 함수 변수 위치 변경, 기본값(default)은 첫번째 열 mutate() 함수와 같이 매개변수 .before, .after를 이용하여 위치 지정 flights %&gt;% relocate(air_time, distance) flights %&gt;% relocate(carrier:tailnum, .before = day) 6.1.4 그룹 관련 함수 6.1.4.1 summarise() 함수 통계량 계산하여 하나의 행으로 요약 여러 개의 다양한 요약함수 사용 가능 n() 함수 - 그룹별 크기 계산 flights %&gt;% summarise(mean = mean(air_time, na.rm = TRUE), # 평균 std_dev = sd(air_time, na.rm = TRUE), # 표준편차 n = n()) # 데이터 개수 6.1.4.2 group_by() 함수 특정 변수를 기준으로 그룹화 일반적으로 summarise()와 함께 사용 여러 변수를 기준으로 그룹화 가능 ungroup() 함수 - 그룹화 제거 flights %&gt;% group_by(month) # 데이터 변화 x, 그룹화되어 있음 flights %&gt;% group_by(month) %&gt;% # 월별 평균 출발 지연 시간, 그룹 크기 summarise(delay = mean(dep_delay, na.rm = TRUE), n = n()) flights %&gt;% group_by(year, month, day) %&gt;% summarise(n = n()) flights %&gt;% group_by(month) %&gt;% ungroup() %&gt;% summarise(n = n()) # 그룹화 제거 6.2 tidyr 패키지 6.2.1 wide format과 long format wide format 사람이 읽기 좋은 데이터 구조 통계학에서 다루는 데이터 테이블 구조와 동일한 개념 각 행은 관측 단위(사람, 가구 등)를 나타내며, 각 열은 관측 단위에 대한 측정값(키, 몸무게 등)으로 표현된 형태 long format 컴퓨터가 이해하기 편한 데이터 구조 각 행은 wide format에서 특정 셀의 정보를 반영하며, 각 열은 요인(factor)으로 표현된 형태 wide format보다 유연하여 데이터 추가 및 삭제 용이 [예제] WHO에서 발표한 1999~2000년 3개 국가(아프가니스탄, 브라질, 중국)의 결핵 사례 수 동일한 데이터셋을 다양한 format으로 보여줌 library(tidyr) table1 table2 table3 table4a table4b 6.2.2 long format으로 변환 wide format을 long format으로 변환 - pivot_longer() 함수(권장) 행의 개수를 늘리고 열의 개수를 줄여서 데이터셋을 길게 만듬 long format으로 변환하고자 하는 열을 지정하는 방법은 dplyr::select() 함수와 동일 [참고] gather(), reshape2::melt() 함수 ## Example 1 table4a %&gt;% pivot_longer(c(`1999`, `2000`), names_to = &quot;year&quot;, values_to = &quot;cases&quot;) %&gt;% mutate(year = parse_integer(year)) # year 변수를 정수형으로 변경 table4b %&gt;% pivot_longer(c(`1999`, `2000`), names_to = &quot;year&quot;, values_to = &quot;population&quot;) %&gt;% mutate(year = parse_integer(year)) # year 변수를 정수형으로 변경 ## Example 2 relig_income %&gt;% pivot_longer(-religion, names_to = &quot;income&quot;, values_to = &quot;count&quot;) ## Example 3 billboard %&gt;% pivot_longer(cols = starts_with(&quot;wk&quot;), # dplyr::select()의 helpers 함수 사용 names_to = &quot;week&quot;, names_prefix = &quot;wk&quot;, values_to = &quot;rank&quot;, values_drop_na = TRUE) # 결측값(NA) 제거 6.2.3 wide format으로 변환 long format을 wide format으로 변환 - pivot_wider() 함수(권장) 관측값이 여러 행에 흩어져 있을 때 사용 [참고] spread(), reshape2::dcast() 함수 ## Example 1 table2 %&gt;% pivot_wider(names_from = type, values_from = count) %&gt;% # type에 대한 wide format mutate(rate = cases/population*100000) %&gt;% # 인구 10만 명당 결핵 건수 pivot_wider(names_from = year, # year에 대한 wide format values_from = c(cases, population, rate)) %&gt;% relocate(country, contains(&quot;1999&quot;)) # 변수 위치 변경 ## Example 2 fish_encounters %&gt;% pivot_wider(names_from = station, values_from = seen, values_fill = 0) # 결측값(NA)은 0으로 대체 6.2.4 열의 분리 및 결합 하나의 열에 저장되어 있는 여러 개의 변수를 분리 - separate() 함수 여러 개의 열을 하나의 열로 결합 - unite() 함수 table3 %&gt;% separate(col = rate, into = c(&quot;cases&quot;, &quot;population&quot;), sep = &quot;/&quot;) table5 %&gt;% unite(col = new_year, century, year) 6.2.5 결측값(missing value) 처리 결측값 NA은 누락된 값(not availables)을 나타냄 결측값은 알 수 없으므로, 전염성(contagious)을 가짐 결측값에 대한 산술연산, 비교연산 결과도 알 수 없음(NA) 결측값 확인 - is.na() 함수 NA + 10 NA / 2 NA &gt; 5 10 == NA # Let x be Mary&#39;s age. We don&#39;t know how old she is. # Let y be John&#39;s age. We don&#39;t know how old he is. # Are Mary and John the same age? # We don&#39;t know! NA == NA is.na(NA) 명시적 결측값(explicitly missing value) - NA로 표시된 값 암묵적 결측값(implicitly missing value) - 데이터셋에 존재하지 않는 값 # 2015년 4분기 수익은 NA로 표시되어 있으므로, 명시적 결측값임 # 2016년 1분기 수익은 데이터셋이 존재하지 않으므로, 암묵적 결측값임 stocks &lt;- tibble( year = c(2015, 2015, 2015, 2015, 2016, 2016, 2016), qtr = c( 1, 2, 3, 4, 2, 3, 4), return = c(1.88, 0.59, 0.35, NA, 0.92, 0.17, 2.66)) stocks %&gt;% pivot_wider(names_from = year, # year를 열로 pivot하여 명시적으로 만듬 values_from = return) %&gt;% pivot_longer(cols = c(`2015`, `2016`), # 명시적 결측값이 중요하지 않다면 names_to = &quot;year&quot;, # 암묵적으로 만듬(NA 제거) values_to = &quot;return&quot;, values_drop_na = TRUE) 입력한 열의 고유한 모든 조합을 찾은 후, 필요한 경우 명시적 결측값을 채움 - complete() 함수 결측값을 가장 최근에 존재하는 값(이월된 마지막 관측값)으로 대체 - fill() 함수 결측값이 존재하는 행 제거 - drop_na() 함수 결측값을 특정 값으로 대체 - replace_na() 함수 ## Example for complete() stocks %&gt;% complete(year, qtr) ## Example for fill() tibble(person = c(&quot;Derrick Whitmore&quot;, NA, NA, &quot;Katherine Burke&quot;), treatment = c(1, 2, 3, 1), response = c(7, 10, 9, 4)) %&gt;% fill(person) ## Example for drop_na() mytbl &lt;- tibble(x = c(1, 2, NA), y = c(&quot;a&quot;, NA, &quot;b&quot;)) mytbl %&gt;% drop_na(x) # x 변수에서 결측값이 있는 행 제거 mytbl %&gt;% drop_na() # 모든 변수에 대해 결측값이 있는 행 제거 ## Example 1 for replace_na() # 데이터 프레임에 있는 결측값을 대체하는 경우, 매개변수 replace는 list로 입력 # x 변수의 결측값은 0, y 변수의 결측값은 &quot;unknown&quot;으로 대체 mytbl %&gt;% replace_na(list(x = 0, y = &quot;unknown&quot;)) # 벡터에 있는 결측값을 대체하는 경우, 매개변수 replace는 단일 값(single value)으로 입력 mytbl$x %&gt;% replace_na(0) mytbl$y %&gt;% replace_na(&quot;unknown&quot;) mytbl %&gt;% mutate(x = replace_na(x, 0), y = replace_na(y, &quot;unknown&quot;)) 6.3 stringr 패키지 6.3.1 stringr 패키지 소개 문자열(string)을 다루는 함수 제공 모든 함수가 str_로 시작하여 일관성있게 설계됨 6.3.2 문자열 기초 6.3.2.1 str_length() 함수 문자열에서 문자의 개수(길이) 확인 ## Example 1 library(stringr) str_length(c(&quot;a&quot;, &quot;R for data science&quot;, NA)) ## Example 2 # dplyr::count() 함수 - 그룹별 빈도 값 산출 # 매개변수 wt - 기본값은 NULL로 각 그룹의 행 개수 계산, # 변수를 입력하면 각 그룹에 대한 합계 계산 library(babynames) babynames%&gt;% count(length = str_length(name), wt = n) # 이름 길이의 분포 babynames %&gt;% filter(str_length(name) == 15) %&gt;% # 가장 긴 이름 찾기 count(name, wt = n, sort = TRUE) 6.3.2.2 str_sub() 함수 문자열에서 특정 위치의 문자 추출 매개변수 start, end도 포함되기 때문에 반환되는 문자열의 길이는 end - start + 1임 # Example 1 x &lt;- c(&quot;Apple&quot;, &quot;Banana&quot;, &quot;Pear&quot;) str_sub(x, 1, 3) # 문자열의 1번째 문자부터 3번째 문자까지 추출 str_sub(x, -3, -1) # 문자열의 마지막에서 3번째 문자부터 마지막 문자까지 추출 str_sub(&quot;a&quot;, 1, 5) # 문자열이 너무 짧을 때도 에러는 발생하지 않음! # Example 2 babynames %&gt;% mutate(first = str_sub(name, 1, 1), # 이름의 첫번째 문자 추출 last = str_sub(name, -1, -1)) # 이름의 마지막 문자 추출 6.3.2.3 str_to_lower(), str_to_upper() 함수 대소문자 변환 언어마다 대소문자 변경 규칙이 다르기 때문에 주의해야 함 str_to_lower(c(&quot;Apple&quot;, &quot;Banana&quot;, &quot;Pear&quot;)) str_to_upper(c(&quot;Apple&quot;, &quot;Banana&quot;, &quot;Pear&quot;)) 6.3.3 데이터에서 문자열 생성 6.3.3.1 str_c() 함수 두 개 이상의 벡터에 대해 원소별로 결합하여 단일 문자형 벡터(single character vector)로 만듬 매개변수 sep - 입력된 벡터 결합할 때 사용하는 문자 매개변수 collapse - 입력된 벡터를 단일 문자열(single string)로 결합할 때 사용하는 문자 결측값(NA)에 대한 결과는 결측값임 dplyr::mutate() 함수와 함께 사용 str_c(&quot;Letter: &quot;, letters) str_c(&quot;Letter&quot;, letters, sep = &quot;: &quot;) str_c(letters, &quot; is for&quot;, &quot;...&quot;) str_c(letters[-26], &quot; comes before &quot;, letters[-1]) # 단일 문자열(single string)로 결합 str_c(letters, collapse = &quot;&quot;) str_c(letters, collapse = &quot;, &quot;) # 결측값(NA)이 있는 경우 str_c(c(&quot;a&quot;, NA, &quot;b&quot;), &quot;-d&quot;) # dplyr::mutate()와 함께 사용 info &lt;- tibble(name = c(&quot;Kim&quot;, &quot;Lee&quot;, &quot;Park&quot;)) info %&gt;% mutate(greeting = str_c(&quot;Hi, &quot;, name, &quot;!&quot;)) 6.3.3.2 str_glue() 함수 고정 문자열과 변수 문자열을 결합할 때 \"\"를 반복적으로 타이핑하는 것을 방지하여 가독성을 높임 {}안에 작성된 코드는 문자열 외부에 있는 것처럼 실행 info &lt;- tibble(name = c(&quot;Kim&quot;, &quot;Lee&quot;, &quot;Park&quot;)) info %&gt;% mutate(greeting = str_glue(&quot;Hi, {name}!&quot;)) 6.3.3.3 str_flatten() 함수 벡터의 각 요소를 하나의 문자열로 결합 dplyr::summarise() 함수와 함께 사용 ## Example 1 str_flatten(c(&quot;x&quot;, &quot;y&quot;, &quot;z&quot;)) str_flatten(c(&quot;x&quot;, &quot;y&quot;, &quot;z&quot;), collapse = &quot;, &quot;) str_flatten(c(&quot;x&quot;, &quot;y&quot;, &quot;z&quot;), collapse = &quot;, &quot;, last = &quot;, and &quot;) ## Example 2 mytbl &lt;- tibble(name = c(&quot;Carmen&quot;, &quot;Carmen&quot;, &quot;Marvin&quot;, &quot;Terence&quot;, &quot;Terence&quot;, &quot;Terence&quot;), fruit = c(&quot;banana&quot;, &quot;apple&quot;, &quot;nectarine&quot;, &quot;cantaloupe&quot;, &quot;papaya&quot;, &quot;madarine&quot;)) mytbl %&gt;% group_by(name) %&gt;% summarize(fruits = str_flatten(fruit, &quot;, &quot;)) 6.3.4 정규 표현식을 이용한 패턴 매칭 6.3.4.1 정규 표현식(regular expression; regex, regexp) 주어진 문자열에 특정한 패턴이 있는 경우, 해당 패턴을 일반화(수식화)한 문자열 특정 패턴을 표현한 문자열을 메타 문자(meta character)라 함 일반적으로 특정 패턴을 가지는 문자열을 찾고, 다른 값으로 대체하기 위해 사용 표현식 설명 . 무엇이든 한 글자를 의미 ^ ^ 뒤에 오는 표현식으로 시작하는 경우 $ $ 앞에 오는 표현식으로 끝나는 경우 ? ? 앞에 오는 표현식이 0 또는 1번(0 or 1) 일치하는 경우 + + 앞에 오는 표현식이 1번 또는 그 이상(1 or more) 일치하는 경우 * * 앞에 오는 표현식이 0번 또는 그 이상(0 or more) 포함하는 경우 x &lt;- c(&quot;apple&quot;, &quot;banana&quot;, &quot;pear&quot;) str_view(x, &quot;an&quot;) # matching exact strings str_view(x, &quot;.a.&quot;) # matching any character(except a newline) str_view(x, &quot;^a&quot;) # matching the start of the string str_view(x, &quot;a$&quot;) # matching the end of the string ## how many times a pattern mathces? x &lt;- &quot;1888 is the longest year in Roman numerals: MDCCCLXXXVIII&quot; str_view_all(x, &quot;CC?&quot;) str_view_all(x, &quot;CC+&quot;) str_view_all(x, &quot;CC*&quot;) []을 사용하여 문자 집합을 매칭함 [abcd] - “a”,“b”,“c”,“d” 중 하나 이상과 매칭 [^abcd] - “a”,“b”,“c”,“d”를 제외한 어느 것과도 매칭 names &lt;- c(&quot;Hadley&quot;, &quot;Mine&quot;, &quot;Garrett&quot;) str_view_all(names, &quot;[aeiou]&quot;) str_view_all(names, &quot;[^aeiou]&quot;) str_view_all(names, &quot;[^aeiou]+&quot;) # 같은 문자가 매칭되었지만 매칭 개수가 다름 정규 표현식에서 특수 동작이 아닌 기호 자체로 사용하기 위해서는 그 앞에 \\ 사용 작은 따옴표 '\\'' 큰 따옴표 \"\\\"\" 백슬래시 \"\\\\\\\\\" 점(dot) \\\\. str_view(c(&quot;a\\\\b&quot;), &quot;\\\\\\\\&quot;) str_view(c(&quot;abc&quot;, &quot;a.c&quot;, &quot;bef&quot;), &quot;a\\\\.c&quot;) 6.3.4.2 str_detect() 함수 패턴이 일치하면 TRUE 반환 정규 표현식을 적절하게 사용하면 매우 유용함 dplyr::filter()와 함께 사용 ## Example 1 str_detect(c(&quot;apple&quot;, &quot;banana&quot;, &quot;pear&quot;), &quot;e&quot;) ## Example 2 sum(str_detect(words, &quot;^t&quot;)) # t로 시작하는 단어의 개수 mean(str_detect(words, &quot;[aeiou]$&quot;)) # 모음으로 끝나는 단어의 비율 ## Example 3 babynames %&gt;% filter(str_detect(name, &quot;x&quot;)) babynames %&gt;% group_by(year) %&gt;% summarise(prop_x = mean(str_detect(name, &quot;x&quot;))) 6.3.4.3 str_count() 함수 str_detect() 함수의 변형으로, 일치하는 패턴의 개수 반환 dplyr::mutate()와 함께 사용 str_count(c(&quot;apple&quot;, &quot;banana&quot;, &quot;pear&quot;), &quot;p&quot;) babynames %&gt;% count(name) %&gt;% mutate(vowels = str_count(name, &quot;[aeiou]&quot;), # 모음 개수 확인 consonants = str_count(name, &quot;[^aeiou]&quot;)) # 자음 개수 확인 6.3.4.4 str_replace(), str_replace_all() 함수 일치하는 패턴을 새 문자열로 변경 ## Example 1 x &lt;- c(&quot;apple&quot;, &quot;pear&quot;, &quot;banana&quot;) str_replace(x, &quot;[aeiou]&quot;, &quot;-&quot;) # 처음으로 일치하는 패턴만 변경 str_replace_all(x, &quot;[aeiou]&quot;, &quot;-&quot;) # 일치하는 모든 패턴을 변경 ## Example 2 # 벡터를 이용하여 다중 대체(multiple replacement)할 수 있음 x &lt;- c(&quot;1 house&quot;, &quot;2 cars&quot;, &quot;3 people&quot;) str_replace_all(x, c(&quot;1&quot; = &quot;one&quot;, &quot;2&quot; = &quot;two&quot;, &quot;3&quot; = &quot;three&quot;)) 6.4 forcats 패키지 6.4.1 forcats 패키지 소개 팩터(factor)를 다루는 함수 제공 팩터는 범주형 변수에 사용하는 데이터 객체로, 문자형보다 다루기 더 쉬움 범주형 변수는 가질 수 있는 값이 미리 고정되고 알려져 있음 문자형 벡터를 알파벳순이 아닌 순서로 표현하고 싶을 때 유용 [예제] General Social Survey 시카고 대학교의 독립연구기관 NORC에서 장기간 수행한 General Social Survey의 샘플 테이터 변수 설명 year 조사 연도, 2000~2014년(2년 주기) marital 결혼 상태 age 연령 race 인종 rincome 소득 partyid 정치 성향 relig 종교 denom 교파 tvhours 하루 TV 시청 시간 library(stringr) gss_cat 6.4.2 팩터 수준(levels) 재정렬 처음 나타나는 순서대로 재정렬 - fct_inorder() 함수 각 수준의 빈도가 큰 순서대로 재정렬 - fct_infreq() 함수 수준의 수치 값(numeric value) 순서대로 재정렬 - fct_inseq() 함수 팩터 수준을 반대로 재정렬 - fct_rev() 함수 fct1 &lt;- factor(c(&quot;b&quot;, &quot;b&quot;, &quot;a&quot;, &quot;c&quot;, &quot;c&quot;, &quot;c&quot;)) fct_inorder(fct1) # Levels: b a c fct_infreq(fct2) # Levels: c b a fct2 &lt;- factor(1:3, levels = c(&quot;2&quot;, &quot;3&quot;, &quot;1&quot;)) fct_inseq(fct2) # Levels : 1 2 3 fct_rev(fct1) fct_rev(fct2) # fct_infreq(), fct_rev()는 조합해서 사용 가능 # marital 수준은 각 수준의 빈도에 대해 오름차순으로 재정렬됨 gss_cat %&gt;% mutate(marital = marital %&gt;% fct_infreq() %&gt;% fct_rev()) %&gt;% ggplot(aes(marital)) + geom_bar() 특정 변수를 기준으로 재정렬 - fct_reorder() 함수 특정 수준을 맨 앞으로 배치 - fct_relevel() 함수 ## Example for fct_reorder() # 결혼 상태에 따른 하루 평균 TV 시청 시간 summary1 &lt;- gss_cat %&gt;% group_by(marital) %&gt;% summarise(tvhours = mean(tvhours, na.rm = TRUE), n = n()) %&gt;% mutate(marital = fct_reorder(marital, tvhours)) ## [그래프를 통한 확인] # 하루 평균 TV 시청 시간을 기준으로 marital 수준이 재정렬됨 library(ggplot2) ggplot(summary1, aes(tvhours, marital)) + geom_point(size = 3) + theme(axis.title = element_text(size = 15), axis.text = element_text(size = 15)) ## Example for fct_relevel() # 소득에 따른 평균 연령 summary2 &lt;- gss_cat %&gt;% group_by(rincome) %&gt;% summarise(age = mean(age, na.rm = TRUE), n = n()) ## [그래프를 통한 확인] # reorder() 함수를 사용하면 어떤 소득 집단이 평균 연령이 가장 높고 낮은지 파악하기 쉬우나, # rincome 변수는 순서형 변수(ordinal variable)이기 때문에 이는 바람직하지 않음 # relevel() 함수를 사용하여 &quot;Not applicable&quot; 수준을 맨 앞으로 배치할 수 있음 ggplot(summary2, aes(age, fct_reorder(rincome, age))) + geom_point() ggplot(summary2, aes(age, fct_relevel(rincome, &quot;Not applicable&quot;))) + geom_point() 6.4.3 팩터 수준(levels) 변경 fct_recode() 함수 명시적으로 언급되지 않은 수준은 그대로 유지함 그룹으로 결합하려면 이전 수준을 동일한 새로운 수준에 할당 ※ 주의 : 서로 같지 않은 범주를 함께 묶는다면 잘못된 결과를 도출할 수 있음 fct_collapse() 함수 여러 개의 수준을 하나로 병합 새로운 수준에 대해 이전 수준으로 이루어진 벡터를 제공 fct_lump() 함수 상대적으로 빈도가 낮은 소규모 그룹을 하나로 병합 매개변수 n - Other를 제외한 그룹 개수 지정 ## Example 1 for fct_recode() gss_cat %&gt;% mutate(partyid = fct_recode(partyid, &quot;Republican, strong&quot; = &quot;Strong republican&quot;, &quot;Republican, weak&quot; = &quot;Not str republican&quot;, &quot;Independent, near rep&quot; = &quot;Ind,near rep&quot;, &quot;Independent, near dem&quot; = &quot;Ind,near dem&quot;, &quot;Democrat, weak&quot; = &quot;Not str democrat&quot;, &quot;Democrat, strong&quot; = &quot;Strong democrat&quot;)) %&gt;% count(partyid) ## Example 2 for fct_recode() gss_cat %&gt;% mutate(partyid = fct_recode(partyid, &quot;Republican, strong&quot; = &quot;Strong republican&quot;, &quot;Republican, weak&quot; = &quot;Not str republican&quot;, &quot;Independent, near rep&quot; = &quot;Ind,near rep&quot;, &quot;Independent, near dem&quot; = &quot;Ind,near dem&quot;, &quot;Democrat, weak&quot; = &quot;Not str democrat&quot;, &quot;Democrat, strong&quot; = &quot;Strong democrat&quot;, &quot;Other&quot; = &quot;No answer&quot;, &quot;Other&quot; = &quot;Don&#39;t know&quot;, &quot;Other&quot; = &quot;Other party&quot;)) %&gt;% count(partyid) ## Example for fct_collapse() gss_cat %&gt;% mutate(partyid = fct_collapse(partyid, other = c(&quot;No answer&quot;, &quot;Don&#39;t know&quot;, &quot;Other party&quot;), rep = c(&quot;Strong republican&quot;, &quot;Not str republican&quot;), ind = c(&quot;Ind,near rep&quot;, &quot;Independent&quot;, &quot;Ind,near dem&quot;), dem = c(&quot;Not str democrat&quot;, &quot;Strong democrat&quot;))) %&gt;% count(partyid) ## Example 1 for fct_lump() gss_cat %&gt;% mutate(relig = fct_lump(relig)) %&gt;% count(relig) ## Example 2 for fct_lump() gss_cat %&gt;% mutate(relig = fct_lump(relig, n = 10)) %&gt;% count(relig, sort = TRUE) %&gt;% print(n = Inf) 6.5 lubridate 패키지 6.5.1 lubridate 패키지 소개 날짜, 시간을 다루는 함수 제공 핵심 tidyverse에 포함되지 않으므로 별도로 불러와야 함 6.5.2 날짜/시간 object 6.5.2.1 날짜/시간 object 유형 date object - 날짜를 나타내며, tibble에서 &lt;date&gt;로 출력 time object - 하루 중 시간을 나타내며, tibble에서 &lt;time&gt;로 출력 date-time object - 날짜와 시간을 나타내므로 시점을 고유하게 식별함, tibble에서 &lt;dttm&gt;로 출력 today() # 오늘 날짜(date object) now() # 현재 날짜 및 시간(date-time object) 6.5.2.2 문자열(string)로부터 날짜/시간 object 생성 문자열에서 연(year), 월(month), 일(day)의 순서를 확인한 후, 함수명 “y”, “m”, “d”를 같은 순서로 배치 date-time object를 생성하려면 _와 “h”, “m”, “s” 중 하나 이상을 추가 library(lubridate) ymd(&quot;2017-01-31&quot;) mdy(&quot;January 31st, 2017&quot;) dmy(&quot;31-Jan-2017&quot;) ymd_hms(&quot;2017-01-31 20:11:59&quot;) mdy_hm(&quot;01/31/2017 08:01&quot;) 6.5.2.3 개별 구성요소로부터 날짜/시간 object 생성 날짜/시간과 관련된 개별 구성요소들이 여러 열(변수)에 저장되어 있는 경우 date object - make_date() 함수 date-time object - make_datetime() 함수 library(nycflights13) # 예정된 출발 일시 flights %&gt;% select(year, month, day, hour, minute) %&gt;% mutate(departure = make_datetime(year, month, day, hour, minute)) # 시간에 대해 HHMM 또는 HMM으로 저장된 값은 시(hour)와 분(minute)으로 나누는 사용자 정의 함수 # [참고] %/% 나눗셈의 몫, %% 나눗셈의 나머지 make_datetime_100 &lt;- function(year, month, day, time) { make_datetime(year, month, day, time %/% 100, time %% 100) } # 실제 출발 일시, 실제 도착 일시, 예정된 출발 일시, 예정된 도착 일시 생성 flights_dt &lt;- flights %&gt;% filter(!is.na(dep_time), !is.na(arr_time)) %&gt;% mutate(dep_time = make_datetime_100(year, month, day, dep_time), arr_time = make_datetime_100(year, month, day, arr_time), sched_dep_time = make_datetime_100(year, month, day, sched_dep_time), sched_arr_time = make_datetime_100(year, month, day, sched_arr_time)) %&gt;% select(origin, dest, ends_with(&quot;delay&quot;), ends_with(&quot;time&quot;)) 6.5.2.4 기존의 날짜/시간 object로부터 날짜/시간 object 생성 date object와 date-time object의 상호 전환 - as_datetime(), as_date() 함수 as_datetime(today()) as_date(now()) 6.5.3 날짜/시간 구성요소 개별 구성요소 가져오기 - year(), month(), week(), day(), hour(), minute(), second() 함수 해당 연(year)을 기준으로 몇 번째 일(day)인지 반환 - yday() 해당 월(month)을 기준으로 몇 번째 일(day)인지 반환 - mday() 해당 주(week)에서 무슨 요일인지 반환 - wday() 1은 일요일, 7은 토요일을 의미 month(), wday() 함수 관련 매개변수 매개변수 label - TRUE이면 문자열, FALSE이면 숫자로 표시 매개변수 abbr - FALSE이면 이름 전체 반환(label이 FALSE인 경우 무시) datetime &lt;- ymd_hms(&quot;2016-07-08 12:34:56&quot;) year(datetime) month(datetime) month(datetime, label = TRUE) day(datetime) hour(datetime) minute(datetime) second(datetime) yday(datetime) mday(datetime) wday(datetime) wday(datetime, label = TRUE, abbr = FALSE) 6.5.4 시간 범위(time spans) object 6.5.4.1 시간 범위 object 유형 duration object : 정확한 초(second)를 나타냄 period object : 주(week)와 월(month)과 같이 사람의 단위(human units)로 표현함 interval object : 시작 시점과 종료 시점을 나타냄 6.5.4.2 duration object date object에 뺄셈을 적용하면 difftime object가 생성되며, 이는 초(second), 분(minute), 시(hour), 일(day) 또는 주(week) 단위로 시간 범위를 기록하므로 작업이 어려움 이를 보완하기 위한 duration object는 항상 초(second) 단위를 사용하여 시간 범위를 나타냄 1분 = 60초, 1시간 = 3600초(60분), 1일 = 86400초(24시간), 1주일 = 604800초(7일) duration object는 덧셈, 뺄셈, 곱셈을 적용할 수 있음 윤년, 일광 절약 시간제(daylight saving time) 같은 규칙의 영향을 받기 때문에 시간(hour), 월(month), 연(year)과 같은 큰 시간 단위로 측정한 값에 대해 연산 결과가 실제와 항상 일치하지 않음 [참고] 일광 절약 시간제 - 하절기에 표준시를 원래 시간보다 한 시간 앞당긴 시간을 쓰는 것으로, 미국과 캐나다는 각 시간대의 지역 시간을 기준으로 3월 두 번째주 일요일 오전 2시부터 11월 첫 번째주 일요일 오전 2시까지에 적용함 ## duration object 생성 dday &lt;- today() - ymd(19990113) as.duration(dday) dseconds(15) dminutes(10) dhours(c(12, 24)) ddays(0:5) dweeks(3) dmonths(1:6) dyears(1) ## 산술 연산 2 * dyears(1) dyears(1) + dweeks(12) + dhours(15) tomorrow &lt;- today() + ddays(1) last_year &lt;- today() - dyears(1) # daylight saving time one_pm &lt;- ymd_hms(&quot;2016-03-12 13:00:00&quot;, tz = &quot;America/New_York&quot;) one_pm # &quot;2016-03-12 13:00:00 EST&quot; one_pm + ddays(1) # &quot;2016-03-13 14:00:00 EDT&quot; 6.5.4.3 period object 지정된 단위로 period object 생성 사람이 인식하는 단위로, 작동 방식이 보다 직관적임 ## period object 생성 seconds(15) minutes(10) hours(c(12, 24)) days(0:5) weeks(3) months(1:6) years(1) ## 산술 연산 10 * (months(6) + days(1)) days(50) + hours(25) + minutes(2) # 윤년 ymd(&quot;2016-01-01&quot;) + dyears(1) ymd(&quot;2016-01-01&quot;) + years(1) # daylight saving time one_pm &lt;- ymd_hms(&quot;2016-03-12 13:00:00&quot;, tz = &quot;America/New_York&quot;) one_pm # &quot;2016-03-12 13:00:00 EST&quot; one_pm + days(1) # &quot;2016-03-13 13:00:00 EDT&quot; ## 심야 항공편의 도착 일시에 days(1)을 더해줌 flights_dt %&gt;% filter(arr_time &lt; dep_time) flights_dt &lt;- flights_dt %&gt;% mutate(overnight = arr_time &lt; dep_time, arr_time = arr_time + days(overnight * 1), sched_arr_time = sched_arr_time + days(overnight * 1)) flights_dt %&gt;% filter(overnight, arr_time &lt; dep_time) 6.5.4.4 interval object interval object는 시작 시점과 종료 시점을 나타내므로, 정확한 시간 범위를 확인할 수 있음 interval object 생성 - ineterval() 함수, %--% 연산자 정수 나눗셈을 이용하여 interval object의 기간을 확인할 수 있음 ## interval object 생성 next_year &lt;- today() + years(1) interval(start = today(), end = next_year) # today() %--% next_year # interval object 기간 확인 (today() %--% next_year) / ddays(1) "],["데이터-시각화.html", "Chapter 7 데이터 시각화 7.1 데이터 시각화 이해 7.2 R base graphics 7.3 ggplot2 패키지", " Chapter 7 데이터 시각화 7.1 데이터 시각화 이해 7.1.1 데이터 시각화(data visualization) 데이터나 정보를 그래프, 차트 또는 다른 시각화 형식을 통해 표현하는 것 시각적 이미지는 보다 직관적인 인지를 가능하게 하고 강렬한 인상을 줌 다양한 시각화를 통해 데이터에 대한 다층적인 이해 가능 빅데이터에 대한 효과적인 요약 가능 7.1.2 데이터 유형에 따른 시각화 방법 유형 설명 예제 시각화 방법 범주형 데이터 (categorical data) ㆍ그룹으로 구분되는 데이터 ㆍ기본적으로 숫자로 표현할 수 없음 ㆍ대소비교, 산술연산 불가능 성별, 종교 ㆍ막대 그래프(bar chart) ㆍ원 그래프(pie chart) 연속형 데이터 (numerical data) ㆍ수치 값을 가지는 데이터 ㆍ대소비교, 산술연산 가능 키, 몸무게 ㆍ히스토그램(histogram) ㆍ상자 그림(box plot) ㆍ산점도(scatter plot) ㆍ선 그래프(line plot) 7.2 R base graphics R에 기본적으로 내장되어 있는 데이터 시각화 도구 다양한 종류의 그래프 생성이 가능하며, 매개변수를 통해 세부적인 그래픽 요소를 설정할 수 있음 7.3 ggplot2 패키지 7.3.1 ggplot2 패키지 소개 범용성, 명료함, 일관성 있는 인터페이스, 미적인 그래픽 결과를 제공하는 패키지 Leland Wilkinson(2005)에 의해 개발된 그래픽 문법(grammar of graphics)을 구현함 현재 R을 통한 데이터 시각화의 표준이 되어가고 있음 독립적인 시각적 구성요소를 정의하고, 이를 층층이 쌓아올리는 방식으로 그래프를 생성 원시 데이터를 나타내는 층(layer)를 먼저 정의한 후, 각종 주석이나 통계 객체 등을 추가할 수 있음 시각화 과정을 표준화함으로써 그래픽 문법에 익숙해지면 다양한 그래프를 자유자재로 그릴 수 있음 그래픽 문법의 7가지 요소 요소 설명 data 데이터 aesthetics 시각적 표현 양식(x축, y축, 크기, 색상, 모양 등) geometries 시각화 그래픽 요소(기하 객체)(점, 선, 막대 등) facets 화면 분할 statistics 통계량 coordinates 좌표계 theme 그래프 꾸미기 7.3.2 ggplot2 기본 구조 가장 기본적인 구조는 ggplot() 함수와 geom_로 시작하는 geom 함수임 각 구조는 +로 연결되며, 코드가 길어져 다음 줄로 넘어가야 한다면 반드시 +는 오른쪽 끝에 있어야 함 ggplot() 함수 좌표 시스템(빈 그래프)을 생성하며, 그 후 레이어를 추가할 수 있음 그래프는 하나 이상의 레이어를 추가해서 완성됨 첫번째 매개변수는 데이터셋으로, 데이터프레임(data frame)이여야 함 geom 함수 ggplot object에 다양한 유형의 레이어를 추가함 범주형 데이터 시각화 - geom_bar() 연속형 데이터 시각화 - geom_histogram(), geom_boxplot(), geom_point(), geom_line() ggplot(data = &lt;DATA&gt;) + &lt;GEOM_FUNCTION&gt;(mapping = aes(&lt;MAPPINGS&gt;)) 7.3.3 막대 그래프(bar chart) 범주형 데이터를 시각화한 것으로, 그룹별 빈도를 막대로 나타낸 그래프 [예제] diamonds 데이터셋 cut : quality of the cut (Fair, Good, Very Good, Premium, Ideal) color : diamond color, from D (best) to J (worst) clarity : a measurement of how clear the diamond is (I1 (worst), SI2, SI1, VS2, VS1, VVS2, VVS1, IF (best)) ## Example 1 library(ggplot2) ggplot(diamonds, aes(x = cut)) + geom_bar() ggplot(diamonds, aes(x = cut)) + geom_bar(fill =&quot;orange&quot;) ggplot(diamonds, aes(x = cut, fill = cut)) + geom_bar() # cut 및 clarity에 따른 막대 그래프 ggplot(diamonds, aes(x = cut, fill = clarity)) + geom_bar() # 누적 막대 그래프 ggplot(diamonds, aes(x = cut, fill = clarity)) + geom_bar(position=&quot;fill&quot;) # 100% 누적 막대 그래프 ggplot(diamonds, aes(x = cut, fill = clarity)) + geom_bar(position=&quot;dodge&quot;) ggplot(diamonds, aes(x = cut, fill = clarity)) + geom_bar(position=&quot;identity&quot;, alpha = 0.2) ## Example 2 library(forcats) gss_cat %&gt;% mutate(race = fct_infreq(race)) %&gt;% # 각 수준의 빈도에 대해 내림차순 재정렬 ggplot(aes(race, fill = race)) + geom_bar() + scale_x_discrete(drop = FALSE) + # 값이 없는 팩터의 수준(labels)을 표시 scale_fill_manual(values = c(&quot;#d1495b&quot;, &quot;#edae49&quot;, &quot;#66a182&quot;, &quot;#2389da&quot;)) + theme(axis.title = element_text(size = 10), axis.text = element_text(size = 10)) + labs(x = &quot;&quot;, y = &quot;frequency&quot;) ## Example 3 library(lubridate) make_datetime_100 &lt;- function(year, month, day, time) { make_datetime(year, month, day, time %/% 100, time %% 100) } library(nycflights13) flights_dt &lt;- flights %&gt;% filter(!is.na(dep_time), !is.na(arr_time)) %&gt;% mutate(dep_time = make_datetime_100(year, month, day, dep_time), arr_time = make_datetime_100(year, month, day, arr_time), sched_dep_time = make_datetime_100(year, month, day, sched_dep_time), sched_arr_time = make_datetime_100(year, month, day, sched_arr_time)) %&gt;% select(origin, dest, ends_with(&quot;delay&quot;), ends_with(&quot;time&quot;)) ## 출발 요일에 대한 분포 library(RColorBrewer) flights_dt %&gt;% mutate(wday = wday(dep_time, label = TRUE)) %&gt;% ggplot(aes(x = wday, fill = wday)) + geom_bar() + scale_fill_manual(values = brewer.pal(7, &quot;Spectral&quot;)) 7.3.4 히스토그램(histogram) 연속형 데이터를 일정 구간으로 나눈 후, 각 구간별 빈도를 막대로 나타낸 그래프 [예제] birthwt 데이터셋 smoke : smoking status during pregnancy (1=Yes, 0=No) bwt : birth weight in grams library(MASS) ggplot(birthwt, aes(x = bwt)) + geom_histogram(fill = &quot;darkgreen&quot;) + labs(title=&quot;Histogram of birthweigth&quot;, x = &quot;Birthweight(in gram)&quot;, y =&quot;&quot;) + theme_classic() labels &lt;- c(&quot;1&quot; = &quot;Smoker&quot;, &quot;0&quot; = &quot;Nonsmoker&quot;) ggplot(birthwt, aes(x = bwt, fill = smoke)) + geom_histogram(binwidth = 200) + labs(title=&quot;Histogram of birthweigth&quot;, x = &quot;Birthweight(in gram)&quot;, y =&quot;&quot;) + facet_grid(smoke ~ ., labeller = labeller(smoke = labels)) + # 화면 분할 theme(plot.title = element_text(hjust = 0.5), # 제목 가운데 정렬 legend.position = &quot;none&quot;) # 범례 제거 7.3.5 상자 그림(box plot) 다섯숫자 요약값(five number summary)에 근거하여 나타낸 그래프 사분위수(quantile) - 데이터를 크기 순으로 정렬했을 때, 이를 사등분하는 값 최소값 1사분위수(Q1) : 관측값의 25% 순서에 있는 값 중앙값(median) : 관측값의 50% 순서에 있는 값 3사분위수(Q3) : 관측값의 75% 순서에 있는 값 최대값 사분위수범위(IQR) = Q3 - Q1 정상범위 (Q1 - 1.5*IQR, Q3 + 1.5*IQR)를 벗어난 경우를 이상치(outlier)로 판단 그룹별 연속형 데이터의 분포를 비교하는데 용이 [예제] birthwt 데이터셋 race : mother’s race (1 = white, 2 = black, 3 = other) smoke : smoking status during pregnancy (1=Yes, 0=No) ui : presence of uterine irritability (1=Yes, 0=No) bwt : birth weight in grams ggplot(birthwt, aes(x = factor(race), y = bwt)) + geom_boxplot() + coord_flip() bp &lt;- birthwt %&gt;% mutate(smoke = fct_recode(as_factor(smoke), &quot;Smoker&quot; = &quot;1&quot;, &quot;Nonsmoker&quot; = &quot;0&quot;), ui = fct_recode(as_factor(ui), &quot;Presence&quot; = &quot;1&quot;, &quot;None&quot; = &quot;0&quot;)) %&gt;% ggplot(aes(x = factor(race), y = bwt)) + geom_boxplot() + facet_grid(ui ~ smoke) bp + geom_point(color = &quot;red&quot;, alpha = 0.5) bp + geom_jitter(color = &quot;red&quot;, alpha = 0.5) # 관측값을 상자 그림 위에 겹쳐서 나타냄 7.3.6 산점도(scatter plot) 두 연속형 변수의 관측 순서쌍을 이차원 평면 상에 점(point)으로 나타낸 그래프 한 변수의 변화에 따른 다른 변수의 변화(trend)를 파악하는데 용이 pch - 점(point) 유형 0~14 : 채우기 없음, 테두리 색상만 color로 설정 15~20 : 채우기 색상만 color로 설정, 테두리 없음 21~24 : 채우기 색상은 fill, 테두리 색상은 color로 설정 [예제] birthwt 데이터셋 age : mother’s age in years lwt : mother’s weight in pounds at last menstrual period smoke : smoking status during pregnancy (1=Yes, 0=No) bwt : birth weight in grams ggplot(birthwt, aes(x = age, y = bwt)) + geom_point(size = 3, color = &quot;red&quot;, alpha = 0.5, pch = 17) + geom_rug(position = &quot;jitter&quot;, size = 0.2) + # rug plot 추가 geom_smooth(method = lm) + # 선형 추세선 추가 theme_classic() ggplot(birthwt, aes(x = age, y = bwt)) + geom_point(aes(color = lwt), size = 4, alpha = 0.7, pch = 19) + scale_color_gradient(low = &quot;#FFF59D&quot;, high = &quot;#388E3C&quot;) + labs(color = &quot;mother&#39;s weight&quot;) + theme_classic() ggplot(birthwt, aes(x = age, y = bwt, color = factor(smoke), size = lwt)) + geom_point(alpha = 0.5) + labs(color = &quot;Smoking&quot;, size = &quot;Mother&#39;s weight&quot;) + scale_color_discrete(labels = c(&quot;No&quot;, &quot;Yes&quot;)) 7.3.7 선 그래프(line plot) 한 변수의 변화에 따른 다른 변수의 변화를 선(line)으로 연결하여 나타낸 그래프 일반적으로 x축에는 시간 변수가 종종 사용됨 연속형 변수는 보통 몇 개의 이산적인 값을 취하는 경우를 다룸 범주형 변수는 순서가 있는 경우에만 가능 ## Example 1 # 시간에 따른 이름에 &quot;x&quot;가 포함되는 아기의 비율 변화 library(babynames) babynames %&gt;% group_by(year) %&gt;% summarise(prop_x = mean(str_detect(name, &quot;x&quot;))) %&gt;% ggplot(aes(year, prop_x)) + geom_line() [예제] gapminder 데이터셋 continent : factor with 5 levels year : ranges from 1952 to 2007 in increments of 5 years lifeExp : life expectancy at birth, in years ## Example 2 # 시간에 따른 대륙별 평균 수명의 중앙값 변화 library(gapminder) gapminder %&gt;% group_by(continent, year) %&gt;% summarise(lifeExp = median(lifeExp)) %&gt;% ggplot(aes(x = year, y = lifeExp, color = continent)) + geom_line(size=1) + geom_point(size=1.5) "],["r-markdown.html", "Chapter 8 R Markdown 8.1 R Markdown 이해 8.2 YAML Header 8.3 Markdown 문법 8.4 R 코드 청크(code chunk)", " Chapter 8 R Markdown 8.1 R Markdown 이해 8.1.1 Markdown과 R Markdown Markdown 일반 텍스트 기반의 경량 마크업 언어(markup language) 특수 기호와 문자를 이용한 간단한 구조의 문법을 사용하여 웹에서 빠르게 컨텐츠를 작성 일반 마크업 언어에 비해 문법이 쉽고 간단하며 직관적임 마크업 언어 - 태그(tag) 등을 이용하여 문서나 데이터의 구조를 명기하는 언어의 일종 R Markdown Markdown을 기반으로 만든 데이터 과학을 위한 통합 저작 프레임워크 R 코드와 분석 결과(표, 그래프 등)를 포함하는 컨텐츠 제작 도구 완벽하게 재현 가능하며, HTML, PDF, MS Word 등 다양한 출력 형식을 지원 파일 확장자 - .Rmd R Markdown 사용 방식 분석 결과에만 관심이 있는 의사결정권자와의 소통(for communicating) 분석 결과와 그 과정에 관심이 있는 다른 데이터 과학자와의 협업(for collaborating) 데이터 과학을 수행하는 환경으로써 현대식 실험실 노트와 같은 용도 대표적인 3가지 활용 방법 문서(pdf, html, docx) - bookdown 패키지 프리젠테이션(pdf, html, pptx) - xaringan 패키지 웹, 블로그(html) - blogdown 패키지, distill 패키지 [참고] R Markdown Cheat Sheet [참고] R Markdown Reference Guide [참고] R Markdown: The Definitive Guide (2022) 8.1.2 R Markdown 시작하기 8.1.2.1 R Markdown 파일 생성 rmarkdown 패키지, knitr 패키지 사용 R Markdown 파일 생성 - [File] - [New File] - [R Markdown…] 최종 결과물(HTML, PDF, MS Word) 생성 Knit 아이콘 단축키 ctrl + shift + k 8.1.2.2 R Markdown 구조 ---으로 둘러싸인 YAML(Yet Another Markup Language)(option) Markdown 텍스트 `(backtick)으로 둘러싸인 R 코드 청크(code chunk) 8.1.2.3 R Markdown 작업 흐름 R Markdown 파일(.Rmd) 생성 문서를 니트(knit)하면 코드 청크(code chunk)에 있는 모든 R 코드를 순차적으로 실행 knitr는 코드 청크가 출력한 코드, 텍스트, 그래프 등을 변형 및 결합해 새로운 Markdown 파일(.md) 생성 pandoc 문서 변환기를 통해 Markdown 파일을 다양한 문서 형식(HTML, PDF, MS Word, …)으로 출력 8.2 YAML Header R Markdown 문서의 메타 데이터(meta data)로, 문서의 맨 처음에 포함되어야 함 제목, 저자, 날짜, 최종 출력 형태 등의 정보를 포함 문서 형태 및 생성을 위해 사용하는 R 패키지(bookdown, rticles 등)에 따라 구성요소가 달라짐 기본적으로 key: value 쌍으로 구성 : 바로 다음에는 반드시 공백(space)이 있어야 함 --- title: &quot;제목&quot; subtitle: &quot;부제목&quot; author: &quot;작성자&quot; date: &quot;작성일&quot; output: - &quot;html_document&quot; - &quot;word_document&quot; - &quot;pdf_document&quot; - &quot;md_document&quot; - &quot;isoslides_presentation&quot; - &quot;slidy_presentation&quot; - &quot;beamer_presentation&quot; etc... --- 8.3 Markdown 문법 8.3.1 인라인 서식(inline formatting) 강조(emphasis) 이탤릭체 - italic, italic 굵은글씨 - bold, bold *italic* _italic_ **bold** __bold__ 인라인 코드(inline code) : `(backtick)으로 묶음 We defined the `add` function to compute the sum of two numbers. 고정된 코드 블록(plain code blocks) : ```(backticks)으로 묶음 ``` This text is displayed verbatim / preformatted ``` 줄 바꿈(manual line breks) : 줄 마지막에 두 개 이상의 공백(space) 입력 가로줄(horizontal rule) : 세 개 이상의 ***(asterisks), ---(dashes) 입력 ****** ------ 표(tables) First Header Second Header Third Header Left-aligned Centered Right-aligned Content Cell Content Cell Content Cell First Header | Second Header | Third Header :-------------|:---------------:|--------------: Left-aligned | Centered | Right-aligned Content Cell | Content Cell | Content Cell 그 외 서식(miscellaneous) 위 첨자 superscript2 아래 첨자 subscript2 삭제 표시 strikethrough superscript^2^ subscript~2~ ~~strikethrough~~ 8.3.2 블록 요소(block-level elements) 장/절(headers) : #기호의 숫자로 표시하며, 최대 6단계까지 있음 # First-level header ## Second-level header ### Third-level header 목록(list) 순서가 없는 목록 : -, +, * 기호 중 하나를 사용 순서가 있는 목록 : 숫자로 표현 * Item 1 * Item 2 + Item 2a + Item 2b 1. Item 1 2. Item 2 3. Item 3 + Item 3a + Item 3b 인용구(blockquotes) : &gt; 기호로 표시 “Blaze with the fire that is never extinguished.” —Luisa Sigea de Velasco(1521~1577) &gt; &quot;Blaze with the fire that is never extinguished.&quot; &gt; &gt; ---Luisa Sigea de Velasco(1521~1577) 이미지(images) RStudio logo ![RStudio logo](RStudio-logo.png) 링크(links) : RStudio [RStudio](https://posit.co/) 8.3.3 수학 표현식(math expressions) inline equation : $으로 묶음 display equation : $$으로 묶음 수학 표현식은 LaTeX 문법을 따름 \\[f(k) = {n \\choose k} p^{k} (1-p)^{n-k}\\] $$f(k) = {n \\choose k} p^{k} (1-p)^{n-k}$$ 8.4 R 코드 청크(code chunk) 8.4.1 R 코드 청크 이해 실제 R 코드가 실행되는 부분으로, 일종의 계산용 코드 덩어리 ```{r}와 ```사이에 코드 청크 입력 단축키 ctrl + alt + i 청크 옵션을 통해 코드 출력, 코드 출력 형태, 코드 결과 출력 등을 설정할 수 있음 ```{r, chunk_name, chunk_options, ...} codes ``` 8.4.2 청크 이름(chunk name) 청크 이름 사용의 3가지 이점 스크립트 편집기의왼쪽 하단에 있는 드롭다운 코드 탐색기를 사용하여 특정 청크로 쉽게 이동 가능 청크에 의해 생성된 그래프가 유용한 이름을 가지게 되어 다른 곳에서 쉽게 사용 가능 캐시된 청크 네트워크를 설정하여 불필요한 계산을 피할 수 있음 8.4.3 청크 옵션(chunk options) [참고] Options (2020) 옵션 기본 값 자료형 설명 eval TRUE logical 코드 실행 여부 include TRUE logical 최종 문서에 코드와 출력 결과 포함 여부 echo TRUE logical 코드 출력 여부 results ‘markup’ character 출력 결과 포맷 지정을 위한 옵션 ㆍ’markup’ : 출력 형식에 따라 적절한 환경으로 텍스트를 마크업 ㆍ’asis’ : 변환하지 않은 원래 R 출력 결과를 그대로(as is) 출력 ㆍ’hide’ : 출력 결과를 숨김 ㆍ’hold’ : 생성된 모든 코드와 출력을 단일 블록으로 축소 message TRUE logical 코드로부터 생성된 메세지 출력 여부 warning TRUE logical 경고 메세지 출력 여부 error TRUE logical 에러 메세지 출력 여부 청크 옵션이 제어 가능한 출력 유형 Option Run code Show code Output Plots Messages Warnings eval = FALSE ○ ○ ○ ○ ○ include = FALSE ○ ○ ○ ○ ○ echo = FALSE ○ results = “hide” ○ fig.show = “hide” ○ message = FALSE ○ warning = FALSE ○ # results = &quot;markup&quot;(default) ```{r, results = &quot;markup&quot;} cat(&quot;I&#39;m raw **Markdown** content.\\n&quot;) ``` # results = &quot;asis&quot; ```{r, results = &quot;asis&quot;} cat(&quot;I&#39;m raw **Markdown** content.\\n&quot;) ``` 8.4.4 표(table) 삽입 간단한 형태의 표 생성 - knitr::kable() 함수 head(iris) kable(head(iris)) 8.4.5 전역 옵션(global option) 문서 전체에 적용되는 기본(default) 옵션을 설정할 수 있음 청크 옵션을 모을 수 있는 객체 knitr::opts_chunk opts_chunk$set() - 전역 옵션 설정 opts_chunk$get() - 설정된 값 확인 opts_chunk$restore() - 기본 설정으로 변경 opts_chunk$get(&quot;warning&quot;) opts_chunk$set(&quot;warning&quot; = FALSE) opts_chunk$get(&quot;warning&quot;) opts_chunk$restore() opts_chunk$get(&quot;warning&quot;) # 전역 옵션 설정 : warning = FALSE ```{r, include = FALSE} opts_chunk$set(warning = FALSE) ``` # 개별 청크에서 warning 옵션을 설정하지 않은 경우, 전역 옵션 설정을 따름 ```{r} as.numeric(c(1, 2, &quot;a&quot;)) ``` # 개별 청크에서 warning 옵션을 설정하는 경우, 해당 옵션 설정을 따름 ```{r, warning = TRUE} as.numeric(c(1, 2, &quot;a&quot;)) ``` 8.4.6 인라인 코드(inline code) R 코드를 텍스트에 직접 입력 - `r와 ` 사이에 코드 입력 텍스트에서 데이터의 속성을 언급할 때 매우 유용 iris 데이터셋에는 150개의 관측값과 5개의 변수가 있습니다. &gt; iris 데이터셋에는 `r nrow(iris)`개의 관측값과 `r ncol(iris)`개의 변수가 있습니다. "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
