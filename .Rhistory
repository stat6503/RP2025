### 관계형 데이터
![](./img/fig6-1.png)
x <- tibble(key = c(1, 2, 3), value_x = c("x1", "x2", "x3"))
library(tibble)
x <- tibble(key = c(1, 2, 3), value_x = c("x1", "x2", "x3"))
y <- tibble(key = c(1, 2, 4), value_y = c("y1", "y2", "x3"))
x
y
x %>% inner_join(y, by = "key")                       # inner join
library(dplyr)
x %>% inner_join(y, by = "key")                       # inner join
x %>% left_join(y, by = "key")                        # left join
x %>% right_join(y, by = "key")                       # right join
x %>% full_join(y, by = "key")                        # full join
# 여객기에 매칭되지 않는 항공편 필터링
flights %>% anti_join(planes, by = "tailnum") %>% count(tailnum, sort = TRUE)
bookdown::render_book("index.Rmd", output_dir = "docs")
## Example 1
info <- tibble(name = c("Kim", "Lee", "Park"))
bookdown::render_book("index.Rmd", output_dir = "docs")
library(tidyverse)
str_view(c("summarize", "summary", "rowsum"), "sum")
str_view(c("summarize", "summary", "rowsum"), "\bsum")
str_view(c("summarize", "summary", "rowsum"), "\bsum\b")
str_view(c("summarize", "summary", "rowsum", "asumb"), "\bsum\b")
str_view(c("summarize", "summary", "rowsum", "asumb"), "\bsum")
str_view(c("summarize", "summary", "rowsum", "asumb"), "sum")
str_view(c("summarize", "summary", "rowsum", "asumb"), "^sum")
str_view(c("summarize", "summary", "rowsum", "asumb"), "sum$")
str_view(c("summarize", "summary", "rowsum", "asumb"), "\bsum\b")
str_view(c("summarize", "summary", "rowsum", "asumb", "sum"), "\bsum\b")
str_view(c("summarize", "summary", "rowsum", "asumb", "sum"), "\\bsum\\b")
str_view(c("summarize", "summary", "rowsum", "asumb"), "\\bsum")
str_view(c("abc","c","ab"), "^...$")
str_view_all(c("abc","c","ab"), "^...$")
str_view(c("abc", ""), "^$")                # 빈 문자열과 매칭
str_view(c("abc", ""), "$^$")                # 빈 문자열과 매칭
str_view(c("abc", ""), "$^$.")                # 빈 문자열과 매칭
str_view(c("abc a", ""), "$^$.")                # 빈 문자열과 매칭
str_view(c("abc a", ""), "$^$")                # 빈 문자열과 매칭
str_view_all(x, "CC*")                      # 'CC'가 0번
x <- "1888 is the longest year in Roman numerals: MDCCCLXXXVIII"
str_view_all(x, "CC*")                      # 'CC'가 0번
str_view_all(x, "CC*")                      # 'CC'가 0번
str_view_all(x, "CC?")                      # 'CC'가 0번
x <- "I have a dog, a cat, and a bunny, and I also have dogs and cats."
# '?'는 a가 0번 또는 1번 반복되는 경우
str_view_all(x, "a?")
# '+'는 a가 1번 이상 반복되는 경우
str_view_all(x, "a+")
# '*'는 a가 0번 이상 반복되는 경우
str_view_all(x, "a*")
x <- "1888 is the longest year in Roman numerals: MDCCCLXXXVIII"
str_view_all(x, "CC?")                      # 'CC'가 0번 또는 1번 반복
str_view_all(x, "CC+")                      # 'CC'가 1번 이상 반복
str_view_all(x, "CC*")                      # 'CC'가 0번 이상 반복
str_view(x, "CC?")                      # 'CC'가 0번 또는 1번 반복
x <- c("banana", "apple")
# 첫 번째 매칭만 표시
str_view(x, "a")
# 모든 매칭 표시
str_view_all(x, "a")
x <- "1888 is the longest year in Roman numerals: MDCCCLXXXVIII"
str_view(x, "CC?")                      # 'CC'가 0번 또는 1번 반복
str_view(x, "CC+")                      # 'CC'가 1번 이상 반복
str_view(x, "CC*")                      # 'CC'가 0번 이상 반복
str_view(x, "C{2}")                     # 'C'가 정확히 2번 매칭
str_view(x, "C{2,}")                    # 'C'가 2번 이상 매칭
str_view(x, "C{2,3}")                   # 'C'가 2번 이상 3번 이하 매칭
str_view(x, "C{0,3}")                   # 'C'가 최대 3번 반복 → C, CC, CCC
str_view(x, "C{,3}")                   # 'C'가 최대 3번 반복 → C, CC, CCC
str_view(x, "C{2,3}")                   # 'C'가 2번 이상 3번 이하 반복 → CC, CCC
str_view(c("color", "colour"), "colou?r")
names <- c("Hadley", "Mine", "Garrett")
str_view_all(names, "[aeiou]")          # 모음과 매칭
str_view_all(names, "[^aeiou]")         # 자음과 매칭
str_view_all(names, "[^aeiou]+")        # 같은 문자가 매칭되었지만 매칭 개수가 다름
x <- c("gray", "grey")
str_view(x, "gr(a|e)y")
str_view(c("summarize", "summarise"), "summari(z|s)e")
str_view("'dkdk'", "\'")
str_view("'dkdk'", "\"")
str_view("\"dkdk\", "\"")
str_view("\"dkdk\"", "\"")
str_view("\'dkdk\'", "\'")
str_view("\ddd'", "\'")
str_view("\\ddd'", "\'")
str_view("\\ddd", "\'")
"\\ddd"
str_view("\\ddd", "\")
str_view("\\ddd", "\\")
str_view("\\ddd", "\\\\")
str_view("\"dkdk\"", "\"")
str_view("\"dkdk\"", "\\"")
str_view("\"dkdk\"", "\\\"")
str_view('"dkdk"', "\\\"")
text <- "The total cost is 29 dollars\nand 99 cents."
str_view_all(text, "\\d")               # 숫자(0~9)와 매칭
str_view_all(text, "\\s")               # 여백 문자와 매칭
text
writeLines(text)
words
library(babynames)
babynames %>% filter(str_detect(name, "x$"))
babynames %>%
group_by(year) %>%
summarise(prop_x = mean(str_detect(name, "x$")))
seq_along(words)
babynames %>%
count(name) %>%
mutate(vowels = str_count(name, "[aeiou]"),                     # 모음 개수 확인
consonants = str_count(name, "[^aeiou]"))                # 자음 개수 확인
babynames %>%
count(name) %>%
mutate(vowels = str_count(name, "[aeiou]"),         # 모음 개수
consonants = str_count(name, "[^aeiou]"))    # 자음 개수
count(length = str_length(name), wt = n)            # 이름 길이의 분포
head(sentences)
color <- c("red", "orange", "yellow", "green", "blue", "purple")
color_match <- str_c(color, collapse = "|")           # 색상 이름 벡터를 하나의 정규 표현식으로 변환
has_color <- str_subset(sentences, color_match)
has_color
str_subset(words, "^t")
head(sentences)
color <- c("red", "orange", "yellow", "green", "blue", "purple")
color_match <- str_c(color, collapse = "|")           # 색상 이름 벡터를 하나의 정규 표현식으로 변환
has_color <- str_subset(sentences, color_match)       # 색상을 포함하는 문장
matches <- str_extract(has_color, color_match)        # 첫 번째로 매칭된 색상
more <- sentences[str_count(sentences, color_match) > 1]
str_view(more, color_match)
more <- sentences[str_count(sentences, color_match) > 1]
str_view(more, color_match)
str_extract(more, color_match)
x <- "This is a sentence. This is another sentence."
str_view(x, boundary("word"))
str_view(x, boundary("sentence"))
str_view(x, boundary("line_break"))
str_view(x, boundary("character"))
x <- "Hello world! R is fun.\nNew lines are useful.\nLet's learn stringr."
str_view(x, boundary("word"))
str_view(x, boundary("sentence"))
str_view(x, boundary("line_break"))
str_view(x, boundary("character"))
bookdown::render_book("index.Rmd", output_dir = "docs")
bookdown::render_book("index.Rmd", output_dir = "docs")
library(tidyverse)
fct1 <- factor(c("b", "b", "a", "c", "c", "c"))
fct_inorder(fct1)                                     # Levels: b a c
fct_infreq(fct1)                                      # Levels: c b a
## inseq() 예제
fct2 <- factor(1:3, levels = c("2", "3", "1"))
fct_inseq(fct2)                                       # Levels : 1 2 3
## inrev() 예제
fct_rev(fct1)                                       # Levels : 1 2 3
fct_rev(fct2)                                       # Levels : 1 2 3
